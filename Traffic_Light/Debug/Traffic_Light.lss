
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cc0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000d34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000d34  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000130  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000181b  00000000  00000000  00000ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000899  00000000  00000000  000026eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d78  00000000  00000000  00002f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001fc  00000000  00000000  00003cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000496  00000000  00000000  00003ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c3d  00000000  00000000  0000438e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004fcb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 1b 02 	jmp	0x436	; 0x436 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 37 04 	call	0x86e	; 0x86e <main>
  74:	0c 94 5e 06 	jmp	0xcbc	; 0xcbc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_INITIALIZE>:

//INITIALIZATION
void APP_INITIALIZE(void)
{
	//CAR LEDS
	LED_INITIALIZE(LED_CAR,LED_GREEN_CAR);
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	81 e4       	ldi	r24, 0x41	; 65
  80:	0e 94 1c 04 	call	0x838	; 0x838 <LED_INITIALIZE>
	LED_INITIALIZE(LED_CAR,LED_YELLOW_CAR);
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	81 e4       	ldi	r24, 0x41	; 65
  88:	0e 94 1c 04 	call	0x838	; 0x838 <LED_INITIALIZE>
	LED_INITIALIZE(LED_CAR,LED_RED_CAR);
  8c:	62 e0       	ldi	r22, 0x02	; 2
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	0e 94 1c 04 	call	0x838	; 0x838 <LED_INITIALIZE>
	
	//PEDESTRIANS LEDS
	LED_INITIALIZE(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	82 e4       	ldi	r24, 0x42	; 66
  98:	0e 94 1c 04 	call	0x838	; 0x838 <LED_INITIALIZE>
	LED_INITIALIZE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	82 e4       	ldi	r24, 0x42	; 66
  a0:	0e 94 1c 04 	call	0x838	; 0x838 <LED_INITIALIZE>
	LED_INITIALIZE(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	82 e4       	ldi	r24, 0x42	; 66
  a8:	0e 94 1c 04 	call	0x838	; 0x838 <LED_INITIALIZE>
	
	//BUTTON
	BUTTON_INITIALIZE(BUTTON_PORT,BUTTON_PIN);
  ac:	62 e0       	ldi	r22, 0x02	; 2
  ae:	84 e4       	ldi	r24, 0x44	; 68
  b0:	0e 94 15 04 	call	0x82a	; 0x82a <BUTTON_INITIALIZE>
	
	//TIMER
	Timer_INITIALIZE();
  b4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <Timer_INITIALIZE>
	
	//INTERRUPT
	SEI();
  b8:	78 94       	sei
	RISING_EDGE();
  ba:	85 b7       	in	r24, 0x35	; 53
  bc:	83 60       	ori	r24, 0x03	; 3
  be:	85 bf       	out	0x35, r24	; 53
	SETUP();
  c0:	8b b7       	in	r24, 0x3b	; 59
  c2:	80 64       	ori	r24, 0x40	; 64
  c4:	8b bf       	out	0x3b, r24	; 59
  c6:	08 95       	ret

000000c8 <APP_START>:
}

//STARTING APPLICATION
void APP_START(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	
				LED_ON(LED_CAR,LED_GREEN_CAR);
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	81 e4       	ldi	r24, 0x41	; 65
  d0:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
				LED_OFF(LED_CAR,LED_RED_CAR);
  d4:	62 e0       	ldi	r22, 0x02	; 2
  d6:	81 e4       	ldi	r24, 0x41	; 65
  d8:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
				LED_OFF(LED_CAR,LED_YELLOW_CAR);
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	81 e4       	ldi	r24, 0x41	; 65
  e0:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
				LED_OFF(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	82 e4       	ldi	r24, 0x42	; 66
  e8:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
				LED_OFF(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	82 e4       	ldi	r24, 0x42	; 66
  f0:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
				LED_OFF(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
  f4:	60 e0       	ldi	r22, 0x00	; 0
  f6:	82 e4       	ldi	r24, 0x42	; 66
  f8:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
				for(int i=0;i<50;i++)
  fc:	c0 e0       	ldi	r28, 0x00	; 0
  fe:	d0 e0       	ldi	r29, 0x00	; 0
 100:	09 c0       	rjmp	.+18     	; 0x114 <APP_START+0x4c>
				{
					Timer_ON(100);
 102:	84 e6       	ldi	r24, 0x64	; 100
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
					if(p == 1)
 10a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	21 f0       	breq	.+8      	; 0x11a <APP_START+0x52>
				LED_OFF(LED_CAR,LED_RED_CAR);
				LED_OFF(LED_CAR,LED_YELLOW_CAR);
				LED_OFF(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
				LED_OFF(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
				LED_OFF(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
				for(int i=0;i<50;i++)
 112:	21 96       	adiw	r28, 0x01	; 1
 114:	c2 33       	cpi	r28, 0x32	; 50
 116:	d1 05       	cpc	r29, r1
 118:	a4 f3       	brlt	.-24     	; 0x102 <APP_START+0x3a>
					{
						break;
					}
				}
				
				if (p==1)
 11a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 11e:	81 30       	cpi	r24, 0x01	; 1
 120:	09 f0       	breq	.+2      	; 0x124 <APP_START+0x5c>
 122:	63 c0       	rjmp	.+198    	; 0x1ea <APP_START+0x122>
				{
					LED_OFF(LED_CAR,LED_GREEN_CAR);
 124:	60 e0       	ldi	r22, 0x00	; 0
 126:	81 e4       	ldi	r24, 0x41	; 65
 128:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
					LED_ON(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
 12c:	62 e0       	ldi	r22, 0x02	; 2
 12e:	82 e4       	ldi	r24, 0x42	; 66
 130:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
					
					for(int i=0;i<50;i++)
 134:	c0 e0       	ldi	r28, 0x00	; 0
 136:	d0 e0       	ldi	r29, 0x00	; 0
 138:	0d c0       	rjmp	.+26     	; 0x154 <APP_START+0x8c>
					{
						LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	81 e4       	ldi	r24, 0x41	; 65
 13e:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
						LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 142:	61 e0       	ldi	r22, 0x01	; 1
 144:	82 e4       	ldi	r24, 0x42	; 66
 146:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
						Timer_ON(100);
 14a:	84 e6       	ldi	r24, 0x64	; 100
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
				if (p==1)
				{
					LED_OFF(LED_CAR,LED_GREEN_CAR);
					LED_ON(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
					
					for(int i=0;i<50;i++)
 152:	21 96       	adiw	r28, 0x01	; 1
 154:	c2 33       	cpi	r28, 0x32	; 50
 156:	d1 05       	cpc	r29, r1
 158:	84 f3       	brlt	.-32     	; 0x13a <APP_START+0x72>
					{
						LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
						LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
						Timer_ON(100);
					}
					LED_OFF(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
 15a:	62 e0       	ldi	r22, 0x02	; 2
 15c:	82 e4       	ldi	r24, 0x42	; 66
 15e:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
					LED_OFF(LED_CAR,LED_YELLOW_CAR);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	81 e4       	ldi	r24, 0x41	; 65
 166:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
					LED_OFF(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 16a:	61 e0       	ldi	r22, 0x01	; 1
 16c:	82 e4       	ldi	r24, 0x42	; 66
 16e:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
					
					LED_ON(LED_CAR,LED_RED_CAR);
 172:	62 e0       	ldi	r22, 0x02	; 2
 174:	81 e4       	ldi	r24, 0x41	; 65
 176:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
					LED_ON(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	82 e4       	ldi	r24, 0x42	; 66
 17e:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
					
					Timer_ON(5000);
 182:	88 e8       	ldi	r24, 0x88	; 136
 184:	93 e1       	ldi	r25, 0x13	; 19
 186:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
					LED_OFF(LED_CAR,LED_RED_CAR);
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	81 e4       	ldi	r24, 0x41	; 65
 18e:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
					
					
					for(int i=0;i<50;i++)
 192:	c0 e0       	ldi	r28, 0x00	; 0
 194:	d0 e0       	ldi	r29, 0x00	; 0
 196:	0d c0       	rjmp	.+26     	; 0x1b2 <APP_START+0xea>
					{
						LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
 198:	61 e0       	ldi	r22, 0x01	; 1
 19a:	81 e4       	ldi	r24, 0x41	; 65
 19c:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
						LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 1a0:	61 e0       	ldi	r22, 0x01	; 1
 1a2:	82 e4       	ldi	r24, 0x42	; 66
 1a4:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
						Timer_ON(100);
 1a8:	84 e6       	ldi	r24, 0x64	; 100
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
					
					Timer_ON(5000);
					LED_OFF(LED_CAR,LED_RED_CAR);
					
					
					for(int i=0;i<50;i++)
 1b0:	21 96       	adiw	r28, 0x01	; 1
 1b2:	c2 33       	cpi	r28, 0x32	; 50
 1b4:	d1 05       	cpc	r29, r1
 1b6:	84 f3       	brlt	.-32     	; 0x198 <APP_START+0xd0>
					{
						LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
						LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
						Timer_ON(100);
					}
					LED_OFF(LED_CAR,LED_YELLOW_CAR);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
					LED_OFF(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 1c0:	61 e0       	ldi	r22, 0x01	; 1
 1c2:	82 e4       	ldi	r24, 0x42	; 66
 1c4:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
					LED_OFF(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	82 e4       	ldi	r24, 0x42	; 66
 1cc:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
					
					LED_ON(LED_CAR,LED_GREEN_CAR);
 1d0:	60 e0       	ldi	r22, 0x00	; 0
 1d2:	81 e4       	ldi	r24, 0x41	; 65
 1d4:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
					LED_ON(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	82 e4       	ldi	r24, 0x42	; 66
 1dc:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
					Timer_ON(5000);
 1e0:	88 e8       	ldi	r24, 0x88	; 136
 1e2:	93 e1       	ldi	r25, 0x13	; 19
 1e4:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
 1e8:	21 c1       	rjmp	.+578    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
				}
				 
				else
				{
					LED_OFF(LED_CAR,LED_GREEN_CAR);
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	81 e4       	ldi	r24, 0x41	; 65
 1ee:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
					for(int i=0;i<50;i++)
 1f2:	c0 e0       	ldi	r28, 0x00	; 0
 1f4:	d0 e0       	ldi	r29, 0x00	; 0
 1f6:	0d c0       	rjmp	.+26     	; 0x212 <APP_START+0x14a>
					{
						LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
 1f8:	61 e0       	ldi	r22, 0x01	; 1
 1fa:	81 e4       	ldi	r24, 0x41	; 65
 1fc:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
						Timer_ON(100);
 200:	84 e6       	ldi	r24, 0x64	; 100
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
						if(p == 1)
 208:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	21 f0       	breq	.+8      	; 0x218 <APP_START+0x150>
				}
				 
				else
				{
					LED_OFF(LED_CAR,LED_GREEN_CAR);
					for(int i=0;i<50;i++)
 210:	21 96       	adiw	r28, 0x01	; 1
 212:	c2 33       	cpi	r28, 0x32	; 50
 214:	d1 05       	cpc	r29, r1
 216:	84 f3       	brlt	.-32     	; 0x1f8 <APP_START+0x130>
						{
							break;
						}
					}
					
					if(p == 1)
 218:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	09 f0       	breq	.+2      	; 0x222 <APP_START+0x15a>
 220:	5f c0       	rjmp	.+190    	; 0x2e0 <APP_START+0x218>
					{
						LED_ON(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
 222:	62 e0       	ldi	r22, 0x02	; 2
 224:	82 e4       	ldi	r24, 0x42	; 66
 226:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
						
						for(int i=0;i<50;i++)
 22a:	c0 e0       	ldi	r28, 0x00	; 0
 22c:	d0 e0       	ldi	r29, 0x00	; 0
 22e:	0d c0       	rjmp	.+26     	; 0x24a <APP_START+0x182>
						{
						LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
 230:	61 e0       	ldi	r22, 0x01	; 1
 232:	81 e4       	ldi	r24, 0x41	; 65
 234:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
						LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 238:	61 e0       	ldi	r22, 0x01	; 1
 23a:	82 e4       	ldi	r24, 0x42	; 66
 23c:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
						Timer_ON(100);
 240:	84 e6       	ldi	r24, 0x64	; 100
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
					
					if(p == 1)
					{
						LED_ON(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
						
						for(int i=0;i<50;i++)
 248:	21 96       	adiw	r28, 0x01	; 1
 24a:	c2 33       	cpi	r28, 0x32	; 50
 24c:	d1 05       	cpc	r29, r1
 24e:	84 f3       	brlt	.-32     	; 0x230 <APP_START+0x168>
						{
						LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
						LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
						Timer_ON(100);
						}
						LED_OFF(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
 250:	62 e0       	ldi	r22, 0x02	; 2
 252:	82 e4       	ldi	r24, 0x42	; 66
 254:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
						LED_OFF(LED_CAR,LED_YELLOW_CAR);
 258:	61 e0       	ldi	r22, 0x01	; 1
 25a:	81 e4       	ldi	r24, 0x41	; 65
 25c:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
						LED_OFF(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 260:	61 e0       	ldi	r22, 0x01	; 1
 262:	82 e4       	ldi	r24, 0x42	; 66
 264:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
						
						LED_ON(LED_CAR,LED_RED_CAR);
 268:	62 e0       	ldi	r22, 0x02	; 2
 26a:	81 e4       	ldi	r24, 0x41	; 65
 26c:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
						LED_ON(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 270:	60 e0       	ldi	r22, 0x00	; 0
 272:	82 e4       	ldi	r24, 0x42	; 66
 274:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
						Timer_ON(5000);
 278:	88 e8       	ldi	r24, 0x88	; 136
 27a:	93 e1       	ldi	r25, 0x13	; 19
 27c:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
					
						LED_OFF(LED_CAR,LED_RED_CAR);
 280:	62 e0       	ldi	r22, 0x02	; 2
 282:	81 e4       	ldi	r24, 0x41	; 65
 284:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
						
						
						for(int i=0;i<50;i++)
 288:	c0 e0       	ldi	r28, 0x00	; 0
 28a:	d0 e0       	ldi	r29, 0x00	; 0
 28c:	0d c0       	rjmp	.+26     	; 0x2a8 <APP_START+0x1e0>
						{
							LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	81 e4       	ldi	r24, 0x41	; 65
 292:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
							LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 296:	61 e0       	ldi	r22, 0x01	; 1
 298:	82 e4       	ldi	r24, 0x42	; 66
 29a:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
							Timer_ON(100);
 29e:	84 e6       	ldi	r24, 0x64	; 100
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
						Timer_ON(5000);
					
						LED_OFF(LED_CAR,LED_RED_CAR);
						
						
						for(int i=0;i<50;i++)
 2a6:	21 96       	adiw	r28, 0x01	; 1
 2a8:	c2 33       	cpi	r28, 0x32	; 50
 2aa:	d1 05       	cpc	r29, r1
 2ac:	84 f3       	brlt	.-32     	; 0x28e <APP_START+0x1c6>
						{
							LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
							LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
							Timer_ON(100);
						}
						LED_OFF(LED_CAR,LED_YELLOW_CAR);
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	81 e4       	ldi	r24, 0x41	; 65
 2b2:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
						LED_OFF(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 2b6:	61 e0       	ldi	r22, 0x01	; 1
 2b8:	82 e4       	ldi	r24, 0x42	; 66
 2ba:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
						LED_OFF(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 2be:	60 e0       	ldi	r22, 0x00	; 0
 2c0:	82 e4       	ldi	r24, 0x42	; 66
 2c2:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
						
						LED_ON(LED_CAR,LED_GREEN_CAR);
 2c6:	60 e0       	ldi	r22, 0x00	; 0
 2c8:	81 e4       	ldi	r24, 0x41	; 65
 2ca:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
						LED_ON(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
 2ce:	62 e0       	ldi	r22, 0x02	; 2
 2d0:	82 e4       	ldi	r24, 0x42	; 66
 2d2:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
						Timer_ON(5000);
 2d6:	88 e8       	ldi	r24, 0x88	; 136
 2d8:	93 e1       	ldi	r25, 0x13	; 19
 2da:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
 2de:	a6 c0       	rjmp	.+332    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
					}
					
					else
					{
						LED_OFF(LED_CAR,LED_YELLOW_CAR);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	81 e4       	ldi	r24, 0x41	; 65
 2e4:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
						LED_ON(LED_CAR,LED_RED_CAR);
 2e8:	62 e0       	ldi	r22, 0x02	; 2
 2ea:	81 e4       	ldi	r24, 0x41	; 65
 2ec:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
						for(int i=0;i<50;i++)
 2f0:	c0 e0       	ldi	r28, 0x00	; 0
 2f2:	d0 e0       	ldi	r29, 0x00	; 0
 2f4:	09 c0       	rjmp	.+18     	; 0x308 <APP_START+0x240>
						{
							Timer_ON(100);
 2f6:	84 e6       	ldi	r24, 0x64	; 100
 2f8:	90 e0       	ldi	r25, 0x00	; 0
 2fa:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
							if(p == 1)
 2fe:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 302:	81 30       	cpi	r24, 0x01	; 1
 304:	21 f0       	breq	.+8      	; 0x30e <APP_START+0x246>
					
					else
					{
						LED_OFF(LED_CAR,LED_YELLOW_CAR);
						LED_ON(LED_CAR,LED_RED_CAR);
						for(int i=0;i<50;i++)
 306:	21 96       	adiw	r28, 0x01	; 1
 308:	c2 33       	cpi	r28, 0x32	; 50
 30a:	d1 05       	cpc	r29, r1
 30c:	a4 f3       	brlt	.-24     	; 0x2f6 <APP_START+0x22e>
							{
								break;
							}
						}
						
						if(p == 1)
 30e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 312:	81 30       	cpi	r24, 0x01	; 1
 314:	89 f4       	brne	.+34     	; 0x338 <APP_START+0x270>
						{
							LED_ON(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	82 e4       	ldi	r24, 0x42	; 66
 31a:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
							Timer_ON(5000);
 31e:	88 e8       	ldi	r24, 0x88	; 136
 320:	93 e1       	ldi	r25, 0x13	; 19
 322:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
							LED_OFF(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	82 e4       	ldi	r24, 0x42	; 66
 32a:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
							LED_OFF(LED_CAR,LED_RED_CAR);
 32e:	62 e0       	ldi	r22, 0x02	; 2
 330:	81 e4       	ldi	r24, 0x41	; 65
 332:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
 336:	7a c0       	rjmp	.+244    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
						}
						
						else
						{
							LED_OFF(LED_CAR,LED_RED_CAR);
 338:	62 e0       	ldi	r22, 0x02	; 2
 33a:	81 e4       	ldi	r24, 0x41	; 65
 33c:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
							for(int i=0;i<50;i++)
 340:	c0 e0       	ldi	r28, 0x00	; 0
 342:	d0 e0       	ldi	r29, 0x00	; 0
 344:	0d c0       	rjmp	.+26     	; 0x360 <APP_START+0x298>
							{
								LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	81 e4       	ldi	r24, 0x41	; 65
 34a:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
								Timer_ON(100);
 34e:	84 e6       	ldi	r24, 0x64	; 100
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
								if(p == 1)
 356:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 35a:	81 30       	cpi	r24, 0x01	; 1
 35c:	21 f0       	breq	.+8      	; 0x366 <APP_START+0x29e>
						}
						
						else
						{
							LED_OFF(LED_CAR,LED_RED_CAR);
							for(int i=0;i<50;i++)
 35e:	21 96       	adiw	r28, 0x01	; 1
 360:	c2 33       	cpi	r28, 0x32	; 50
 362:	d1 05       	cpc	r29, r1
 364:	84 f3       	brlt	.-32     	; 0x346 <APP_START+0x27e>
								if(p == 1)
								{
									break;
								}
							}
							if(p==1)
 366:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 36a:	81 30       	cpi	r24, 0x01	; 1
 36c:	09 f0       	breq	.+2      	; 0x370 <APP_START+0x2a8>
 36e:	5e c0       	rjmp	.+188    	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
							{
								LED_ON(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
 370:	62 e0       	ldi	r22, 0x02	; 2
 372:	82 e4       	ldi	r24, 0x42	; 66
 374:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
								
								for(int i=0;i<50;i++)
 378:	c0 e0       	ldi	r28, 0x00	; 0
 37a:	d0 e0       	ldi	r29, 0x00	; 0
 37c:	0d c0       	rjmp	.+26     	; 0x398 <APP_START+0x2d0>
								{
									LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	81 e4       	ldi	r24, 0x41	; 65
 382:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
									LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 386:	61 e0       	ldi	r22, 0x01	; 1
 388:	82 e4       	ldi	r24, 0x42	; 66
 38a:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
									Timer_ON(100);
 38e:	84 e6       	ldi	r24, 0x64	; 100
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
							}
							if(p==1)
							{
								LED_ON(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
								
								for(int i=0;i<50;i++)
 396:	21 96       	adiw	r28, 0x01	; 1
 398:	c2 33       	cpi	r28, 0x32	; 50
 39a:	d1 05       	cpc	r29, r1
 39c:	84 f3       	brlt	.-32     	; 0x37e <APP_START+0x2b6>
								{
									LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
									LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
									Timer_ON(100);
								}
								LED_OFF(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
 39e:	62 e0       	ldi	r22, 0x02	; 2
 3a0:	82 e4       	ldi	r24, 0x42	; 66
 3a2:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
								LED_OFF(LED_CAR,LED_YELLOW_CAR);
 3a6:	61 e0       	ldi	r22, 0x01	; 1
 3a8:	81 e4       	ldi	r24, 0x41	; 65
 3aa:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
								LED_OFF(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	82 e4       	ldi	r24, 0x42	; 66
 3b2:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
								
								LED_ON(LED_CAR,LED_RED_CAR);
 3b6:	62 e0       	ldi	r22, 0x02	; 2
 3b8:	81 e4       	ldi	r24, 0x41	; 65
 3ba:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
								LED_ON(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	82 e4       	ldi	r24, 0x42	; 66
 3c2:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
								Timer_ON(5000);
 3c6:	88 e8       	ldi	r24, 0x88	; 136
 3c8:	93 e1       	ldi	r25, 0x13	; 19
 3ca:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
								
								LED_OFF(LED_CAR,LED_RED_CAR);
 3ce:	62 e0       	ldi	r22, 0x02	; 2
 3d0:	81 e4       	ldi	r24, 0x41	; 65
 3d2:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
								
								
								for(int i=0;i<50;i++)
 3d6:	c0 e0       	ldi	r28, 0x00	; 0
 3d8:	d0 e0       	ldi	r29, 0x00	; 0
 3da:	0d c0       	rjmp	.+26     	; 0x3f6 <APP_START+0x32e>
								{
									LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
 3dc:	61 e0       	ldi	r22, 0x01	; 1
 3de:	81 e4       	ldi	r24, 0x41	; 65
 3e0:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
									LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	82 e4       	ldi	r24, 0x42	; 66
 3e8:	0e 94 31 04 	call	0x862	; 0x862 <LED_TOGGLE>
									Timer_ON(100);
 3ec:	84 e6       	ldi	r24, 0x64	; 100
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
								Timer_ON(5000);
								
								LED_OFF(LED_CAR,LED_RED_CAR);
								
								
								for(int i=0;i<50;i++)
 3f4:	21 96       	adiw	r28, 0x01	; 1
 3f6:	c2 33       	cpi	r28, 0x32	; 50
 3f8:	d1 05       	cpc	r29, r1
 3fa:	84 f3       	brlt	.-32     	; 0x3dc <APP_START+0x314>
								{
									LED_TOGGLE(LED_CAR,LED_YELLOW_CAR);
									LED_TOGGLE(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
									Timer_ON(100);
								}
								LED_OFF(LED_CAR,LED_YELLOW_CAR);
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	81 e4       	ldi	r24, 0x41	; 65
 400:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
								LED_OFF(LED_PEDESTRIANS,LED_YELLOW_PEDESTRIANS);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	82 e4       	ldi	r24, 0x42	; 66
 408:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
								LED_OFF(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	82 e4       	ldi	r24, 0x42	; 66
 410:	0e 94 2a 04 	call	0x854	; 0x854 <LED_OFF>
								
								LED_ON(LED_CAR,LED_GREEN_CAR);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	81 e4       	ldi	r24, 0x41	; 65
 418:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
								LED_ON(LED_PEDESTRIANS,LED_RED_PEDESTRIANS);
 41c:	62 e0       	ldi	r22, 0x02	; 2
 41e:	82 e4       	ldi	r24, 0x42	; 66
 420:	0e 94 23 04 	call	0x846	; 0x846 <LED_ON>
								Timer_ON(5000);
 424:	88 e8       	ldi	r24, 0x88	; 136
 426:	93 e1       	ldi	r25, 0x13	; 19
 428:	0e 94 81 03 	call	0x702	; 0x702 <Timer_ON>
							}
						}
					}
				}
				p=0;
 42c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>

}
 430:	df 91       	pop	r29
 432:	cf 91       	pop	r28
 434:	08 95       	ret

00000436 <__vector_1>:


 IFUN(INT0_VECTOR)
 {
 436:	1f 92       	push	r1
 438:	0f 92       	push	r0
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	0f 92       	push	r0
 43e:	11 24       	eor	r1, r1
 440:	8f 93       	push	r24
 	p =1;
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 448:	8f 91       	pop	r24
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <DIO_INITIALIZE>:
#include "dio.h"

//INITIALIZATION
void DIO_INITIALIZE(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	switch (portNumber)
 454:	62 34       	cpi	r22, 0x42	; 66
 456:	59 f1       	breq	.+86     	; 0x4ae <DIO_INITIALIZE+0x5a>
 458:	18 f4       	brcc	.+6      	; 0x460 <DIO_INITIALIZE+0xc>
 45a:	61 34       	cpi	r22, 0x41	; 65
 45c:	41 f0       	breq	.+16     	; 0x46e <DIO_INITIALIZE+0x1a>
 45e:	08 95       	ret
 460:	63 34       	cpi	r22, 0x43	; 67
 462:	09 f4       	brne	.+2      	; 0x466 <DIO_INITIALIZE+0x12>
 464:	44 c0       	rjmp	.+136    	; 0x4ee <DIO_INITIALIZE+0x9a>
 466:	64 34       	cpi	r22, 0x44	; 68
 468:	09 f4       	brne	.+2      	; 0x46c <DIO_INITIALIZE+0x18>
 46a:	60 c0       	rjmp	.+192    	; 0x52c <DIO_INITIALIZE+0xd8>
 46c:	08 95       	ret
	{
		case PORT_A:
			if (direction == IN)
 46e:	41 11       	cpse	r20, r1
 470:	0e c0       	rjmp	.+28     	; 0x48e <DIO_INITIALIZE+0x3a>
			{
				CLEAR(DDRA, pinNumber);
 472:	4a b3       	in	r20, 0x1a	; 26
 474:	21 e0       	ldi	r18, 0x01	; 1
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	b9 01       	movw	r22, r18
 47a:	02 c0       	rjmp	.+4      	; 0x480 <DIO_INITIALIZE+0x2c>
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	8a 95       	dec	r24
 482:	e2 f7       	brpl	.-8      	; 0x47c <DIO_INITIALIZE+0x28>
 484:	cb 01       	movw	r24, r22
 486:	80 95       	com	r24
 488:	84 23       	and	r24, r20
 48a:	8a bb       	out	0x1a, r24	; 26
 48c:	08 95       	ret
			}
			else if (direction == OUT)
 48e:	41 30       	cpi	r20, 0x01	; 1
 490:	09 f0       	breq	.+2      	; 0x494 <DIO_INITIALIZE+0x40>
 492:	6a c0       	rjmp	.+212    	; 0x568 <DIO_INITIALIZE+0x114>
			{
				SET(DDRA, pinNumber);
 494:	4a b3       	in	r20, 0x1a	; 26
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	30 e0       	ldi	r19, 0x00	; 0
 49a:	b9 01       	movw	r22, r18
 49c:	02 c0       	rjmp	.+4      	; 0x4a2 <DIO_INITIALIZE+0x4e>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	8a 95       	dec	r24
 4a4:	e2 f7       	brpl	.-8      	; 0x49e <DIO_INITIALIZE+0x4a>
 4a6:	cb 01       	movw	r24, r22
 4a8:	84 2b       	or	r24, r20
 4aa:	8a bb       	out	0x1a, r24	; 26
 4ac:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_B:
			if (direction == IN)
 4ae:	41 11       	cpse	r20, r1
 4b0:	0e c0       	rjmp	.+28     	; 0x4ce <DIO_INITIALIZE+0x7a>
			{
				CLEAR(DDRB, pinNumber);
 4b2:	47 b3       	in	r20, 0x17	; 23
 4b4:	21 e0       	ldi	r18, 0x01	; 1
 4b6:	30 e0       	ldi	r19, 0x00	; 0
 4b8:	b9 01       	movw	r22, r18
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_INITIALIZE+0x6c>
 4bc:	66 0f       	add	r22, r22
 4be:	77 1f       	adc	r23, r23
 4c0:	8a 95       	dec	r24
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_INITIALIZE+0x68>
 4c4:	cb 01       	movw	r24, r22
 4c6:	80 95       	com	r24
 4c8:	84 23       	and	r24, r20
 4ca:	87 bb       	out	0x17, r24	; 23
 4cc:	08 95       	ret
			}
			else if (direction == OUT)
 4ce:	41 30       	cpi	r20, 0x01	; 1
 4d0:	09 f0       	breq	.+2      	; 0x4d4 <DIO_INITIALIZE+0x80>
 4d2:	4a c0       	rjmp	.+148    	; 0x568 <DIO_INITIALIZE+0x114>
			{
				SET(DDRB, pinNumber);
 4d4:	47 b3       	in	r20, 0x17	; 23
 4d6:	21 e0       	ldi	r18, 0x01	; 1
 4d8:	30 e0       	ldi	r19, 0x00	; 0
 4da:	b9 01       	movw	r22, r18
 4dc:	02 c0       	rjmp	.+4      	; 0x4e2 <DIO_INITIALIZE+0x8e>
 4de:	66 0f       	add	r22, r22
 4e0:	77 1f       	adc	r23, r23
 4e2:	8a 95       	dec	r24
 4e4:	e2 f7       	brpl	.-8      	; 0x4de <DIO_INITIALIZE+0x8a>
 4e6:	cb 01       	movw	r24, r22
 4e8:	84 2b       	or	r24, r20
 4ea:	87 bb       	out	0x17, r24	; 23
 4ec:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_C:
			if (direction == IN)
 4ee:	41 11       	cpse	r20, r1
 4f0:	0e c0       	rjmp	.+28     	; 0x50e <DIO_INITIALIZE+0xba>
			{
				CLEAR(DDRC, pinNumber);
 4f2:	44 b3       	in	r20, 0x14	; 20
 4f4:	21 e0       	ldi	r18, 0x01	; 1
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	b9 01       	movw	r22, r18
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_INITIALIZE+0xac>
 4fc:	66 0f       	add	r22, r22
 4fe:	77 1f       	adc	r23, r23
 500:	8a 95       	dec	r24
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_INITIALIZE+0xa8>
 504:	cb 01       	movw	r24, r22
 506:	80 95       	com	r24
 508:	84 23       	and	r24, r20
 50a:	84 bb       	out	0x14, r24	; 20
 50c:	08 95       	ret
			}
			else if (direction == OUT)
 50e:	41 30       	cpi	r20, 0x01	; 1
 510:	59 f5       	brne	.+86     	; 0x568 <DIO_INITIALIZE+0x114>
			{
				SET(DDRC, pinNumber);
 512:	44 b3       	in	r20, 0x14	; 20
 514:	21 e0       	ldi	r18, 0x01	; 1
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	b9 01       	movw	r22, r18
 51a:	02 c0       	rjmp	.+4      	; 0x520 <DIO_INITIALIZE+0xcc>
 51c:	66 0f       	add	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	8a 95       	dec	r24
 522:	e2 f7       	brpl	.-8      	; 0x51c <DIO_INITIALIZE+0xc8>
 524:	cb 01       	movw	r24, r22
 526:	84 2b       	or	r24, r20
 528:	84 bb       	out	0x14, r24	; 20
 52a:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_D:
			if (direction == IN)
 52c:	41 11       	cpse	r20, r1
 52e:	0e c0       	rjmp	.+28     	; 0x54c <DIO_INITIALIZE+0xf8>
			{
				CLEAR(DDRD, pinNumber);
 530:	41 b3       	in	r20, 0x11	; 17
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_INITIALIZE+0xea>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	8a 95       	dec	r24
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_INITIALIZE+0xe6>
 542:	cb 01       	movw	r24, r22
 544:	80 95       	com	r24
 546:	84 23       	and	r24, r20
 548:	81 bb       	out	0x11, r24	; 17
 54a:	08 95       	ret
			}
			else if (direction == OUT)
 54c:	41 30       	cpi	r20, 0x01	; 1
 54e:	61 f4       	brne	.+24     	; 0x568 <DIO_INITIALIZE+0x114>
			{
				SET(DDRD, pinNumber);
 550:	41 b3       	in	r20, 0x11	; 17
 552:	21 e0       	ldi	r18, 0x01	; 1
 554:	30 e0       	ldi	r19, 0x00	; 0
 556:	b9 01       	movw	r22, r18
 558:	02 c0       	rjmp	.+4      	; 0x55e <DIO_INITIALIZE+0x10a>
 55a:	66 0f       	add	r22, r22
 55c:	77 1f       	adc	r23, r23
 55e:	8a 95       	dec	r24
 560:	e2 f7       	brpl	.-8      	; 0x55a <DIO_INITIALIZE+0x106>
 562:	cb 01       	movw	r24, r22
 564:	84 2b       	or	r24, r20
 566:	81 bb       	out	0x11, r24	; 17
 568:	08 95       	ret

0000056a <DIO_WRITE>:
}

//CHANGE DIO STATE
void DIO_WRITE(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	switch (portNumber)
 56a:	62 34       	cpi	r22, 0x42	; 66
 56c:	59 f1       	breq	.+86     	; 0x5c4 <DIO_WRITE+0x5a>
 56e:	18 f4       	brcc	.+6      	; 0x576 <DIO_WRITE+0xc>
 570:	61 34       	cpi	r22, 0x41	; 65
 572:	41 f0       	breq	.+16     	; 0x584 <DIO_WRITE+0x1a>
 574:	08 95       	ret
 576:	63 34       	cpi	r22, 0x43	; 67
 578:	09 f4       	brne	.+2      	; 0x57c <DIO_WRITE+0x12>
 57a:	44 c0       	rjmp	.+136    	; 0x604 <DIO_WRITE+0x9a>
 57c:	64 34       	cpi	r22, 0x44	; 68
 57e:	09 f4       	brne	.+2      	; 0x582 <DIO_WRITE+0x18>
 580:	60 c0       	rjmp	.+192    	; 0x642 <DIO_WRITE+0xd8>
 582:	08 95       	ret
	{
		case PORT_A:
		if(value == LOW)
 584:	41 11       	cpse	r20, r1
 586:	0e c0       	rjmp	.+28     	; 0x5a4 <DIO_WRITE+0x3a>
		{
			CLEAR(PORTA, pinNumber);
 588:	4b b3       	in	r20, 0x1b	; 27
 58a:	21 e0       	ldi	r18, 0x01	; 1
 58c:	30 e0       	ldi	r19, 0x00	; 0
 58e:	b9 01       	movw	r22, r18
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_WRITE+0x2c>
 592:	66 0f       	add	r22, r22
 594:	77 1f       	adc	r23, r23
 596:	8a 95       	dec	r24
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_WRITE+0x28>
 59a:	cb 01       	movw	r24, r22
 59c:	80 95       	com	r24
 59e:	84 23       	and	r24, r20
 5a0:	8b bb       	out	0x1b, r24	; 27
 5a2:	08 95       	ret
		}
		else if (value == HIGH)
 5a4:	41 30       	cpi	r20, 0x01	; 1
 5a6:	09 f0       	breq	.+2      	; 0x5aa <DIO_WRITE+0x40>
 5a8:	6a c0       	rjmp	.+212    	; 0x67e <DIO_WRITE+0x114>
		{
			SET(PORTA, pinNumber);
 5aa:	4b b3       	in	r20, 0x1b	; 27
 5ac:	21 e0       	ldi	r18, 0x01	; 1
 5ae:	30 e0       	ldi	r19, 0x00	; 0
 5b0:	b9 01       	movw	r22, r18
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <DIO_WRITE+0x4e>
 5b4:	66 0f       	add	r22, r22
 5b6:	77 1f       	adc	r23, r23
 5b8:	8a 95       	dec	r24
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <DIO_WRITE+0x4a>
 5bc:	cb 01       	movw	r24, r22
 5be:	84 2b       	or	r24, r20
 5c0:	8b bb       	out	0x1b, r24	; 27
 5c2:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_B:
		if(value == LOW)
 5c4:	41 11       	cpse	r20, r1
 5c6:	0e c0       	rjmp	.+28     	; 0x5e4 <DIO_WRITE+0x7a>
		{
			CLEAR(PORTB, pinNumber);
 5c8:	48 b3       	in	r20, 0x18	; 24
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	b9 01       	movw	r22, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_WRITE+0x6c>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	8a 95       	dec	r24
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_WRITE+0x68>
 5da:	cb 01       	movw	r24, r22
 5dc:	80 95       	com	r24
 5de:	84 23       	and	r24, r20
 5e0:	88 bb       	out	0x18, r24	; 24
 5e2:	08 95       	ret
		}
		else if (value == HIGH)
 5e4:	41 30       	cpi	r20, 0x01	; 1
 5e6:	09 f0       	breq	.+2      	; 0x5ea <DIO_WRITE+0x80>
 5e8:	4a c0       	rjmp	.+148    	; 0x67e <DIO_WRITE+0x114>
		{
			SET(PORTB, pinNumber);
 5ea:	48 b3       	in	r20, 0x18	; 24
 5ec:	21 e0       	ldi	r18, 0x01	; 1
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	b9 01       	movw	r22, r18
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <DIO_WRITE+0x8e>
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	8a 95       	dec	r24
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <DIO_WRITE+0x8a>
 5fc:	cb 01       	movw	r24, r22
 5fe:	84 2b       	or	r24, r20
 600:	88 bb       	out	0x18, r24	; 24
 602:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_C:
		if(value == LOW)
 604:	41 11       	cpse	r20, r1
 606:	0e c0       	rjmp	.+28     	; 0x624 <DIO_WRITE+0xba>
		{
			CLEAR(PORTC, pinNumber);
 608:	45 b3       	in	r20, 0x15	; 21
 60a:	21 e0       	ldi	r18, 0x01	; 1
 60c:	30 e0       	ldi	r19, 0x00	; 0
 60e:	b9 01       	movw	r22, r18
 610:	02 c0       	rjmp	.+4      	; 0x616 <DIO_WRITE+0xac>
 612:	66 0f       	add	r22, r22
 614:	77 1f       	adc	r23, r23
 616:	8a 95       	dec	r24
 618:	e2 f7       	brpl	.-8      	; 0x612 <DIO_WRITE+0xa8>
 61a:	cb 01       	movw	r24, r22
 61c:	80 95       	com	r24
 61e:	84 23       	and	r24, r20
 620:	85 bb       	out	0x15, r24	; 21
 622:	08 95       	ret
		}
		else if (value == HIGH)
 624:	41 30       	cpi	r20, 0x01	; 1
 626:	59 f5       	brne	.+86     	; 0x67e <DIO_WRITE+0x114>
		{
			SET(PORTC, pinNumber);
 628:	45 b3       	in	r20, 0x15	; 21
 62a:	21 e0       	ldi	r18, 0x01	; 1
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	b9 01       	movw	r22, r18
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_WRITE+0xcc>
 632:	66 0f       	add	r22, r22
 634:	77 1f       	adc	r23, r23
 636:	8a 95       	dec	r24
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_WRITE+0xc8>
 63a:	cb 01       	movw	r24, r22
 63c:	84 2b       	or	r24, r20
 63e:	85 bb       	out	0x15, r24	; 21
 640:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_D:
		if(value == LOW)
 642:	41 11       	cpse	r20, r1
 644:	0e c0       	rjmp	.+28     	; 0x662 <DIO_WRITE+0xf8>
		{
			CLEAR(PORTD, pinNumber);
 646:	42 b3       	in	r20, 0x12	; 18
 648:	21 e0       	ldi	r18, 0x01	; 1
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	b9 01       	movw	r22, r18
 64e:	02 c0       	rjmp	.+4      	; 0x654 <DIO_WRITE+0xea>
 650:	66 0f       	add	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	8a 95       	dec	r24
 656:	e2 f7       	brpl	.-8      	; 0x650 <DIO_WRITE+0xe6>
 658:	cb 01       	movw	r24, r22
 65a:	80 95       	com	r24
 65c:	84 23       	and	r24, r20
 65e:	82 bb       	out	0x12, r24	; 18
 660:	08 95       	ret
		}
		else if (value == HIGH)
 662:	41 30       	cpi	r20, 0x01	; 1
 664:	61 f4       	brne	.+24     	; 0x67e <DIO_WRITE+0x114>
		{
			SET(PORTD, pinNumber);
 666:	42 b3       	in	r20, 0x12	; 18
 668:	21 e0       	ldi	r18, 0x01	; 1
 66a:	30 e0       	ldi	r19, 0x00	; 0
 66c:	b9 01       	movw	r22, r18
 66e:	02 c0       	rjmp	.+4      	; 0x674 <DIO_WRITE+0x10a>
 670:	66 0f       	add	r22, r22
 672:	77 1f       	adc	r23, r23
 674:	8a 95       	dec	r24
 676:	e2 f7       	brpl	.-8      	; 0x670 <DIO_WRITE+0x106>
 678:	cb 01       	movw	r24, r22
 67a:	84 2b       	or	r24, r20
 67c:	82 bb       	out	0x12, r24	; 18
 67e:	08 95       	ret

00000680 <DIO_TOGGLE>:
}

//TOGGLE DIO STATE
void DIO_TOGGLE(uint8_t pinNumber, uint8_t portNumber)
{
	switch (portNumber)
 680:	62 34       	cpi	r22, 0x42	; 66
 682:	b1 f0       	breq	.+44     	; 0x6b0 <DIO_TOGGLE+0x30>
 684:	18 f4       	brcc	.+6      	; 0x68c <DIO_TOGGLE+0xc>
 686:	61 34       	cpi	r22, 0x41	; 65
 688:	31 f0       	breq	.+12     	; 0x696 <DIO_TOGGLE+0x16>
 68a:	08 95       	ret
 68c:	63 34       	cpi	r22, 0x43	; 67
 68e:	e9 f0       	breq	.+58     	; 0x6ca <DIO_TOGGLE+0x4a>
 690:	64 34       	cpi	r22, 0x44	; 68
 692:	41 f1       	breq	.+80     	; 0x6e4 <DIO_TOGGLE+0x64>
 694:	08 95       	ret
	{
		case PORT_A:
		TOGGEL(PORTA, pinNumber);
 696:	4b b3       	in	r20, 0x1b	; 27
 698:	21 e0       	ldi	r18, 0x01	; 1
 69a:	30 e0       	ldi	r19, 0x00	; 0
 69c:	b9 01       	movw	r22, r18
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <DIO_TOGGLE+0x24>
 6a0:	66 0f       	add	r22, r22
 6a2:	77 1f       	adc	r23, r23
 6a4:	8a 95       	dec	r24
 6a6:	e2 f7       	brpl	.-8      	; 0x6a0 <DIO_TOGGLE+0x20>
 6a8:	cb 01       	movw	r24, r22
 6aa:	84 27       	eor	r24, r20
 6ac:	8b bb       	out	0x1b, r24	; 27
		break;
 6ae:	08 95       	ret
		
		case PORT_B:
		TOGGEL(PORTB, pinNumber);
 6b0:	48 b3       	in	r20, 0x18	; 24
 6b2:	21 e0       	ldi	r18, 0x01	; 1
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	b9 01       	movw	r22, r18
 6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_TOGGLE+0x3e>
 6ba:	66 0f       	add	r22, r22
 6bc:	77 1f       	adc	r23, r23
 6be:	8a 95       	dec	r24
 6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_TOGGLE+0x3a>
 6c2:	cb 01       	movw	r24, r22
 6c4:	84 27       	eor	r24, r20
 6c6:	88 bb       	out	0x18, r24	; 24
		break;
 6c8:	08 95       	ret
		
		case PORT_C:
		TOGGEL(PORTC, pinNumber);
 6ca:	45 b3       	in	r20, 0x15	; 21
 6cc:	21 e0       	ldi	r18, 0x01	; 1
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	b9 01       	movw	r22, r18
 6d2:	02 c0       	rjmp	.+4      	; 0x6d8 <DIO_TOGGLE+0x58>
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	8a 95       	dec	r24
 6da:	e2 f7       	brpl	.-8      	; 0x6d4 <DIO_TOGGLE+0x54>
 6dc:	cb 01       	movw	r24, r22
 6de:	84 27       	eor	r24, r20
 6e0:	85 bb       	out	0x15, r24	; 21
		break;
 6e2:	08 95       	ret
		
		case PORT_D:
		TOGGEL(PORTD, pinNumber);
 6e4:	42 b3       	in	r20, 0x12	; 18
 6e6:	21 e0       	ldi	r18, 0x01	; 1
 6e8:	30 e0       	ldi	r19, 0x00	; 0
 6ea:	b9 01       	movw	r22, r18
 6ec:	02 c0       	rjmp	.+4      	; 0x6f2 <DIO_TOGGLE+0x72>
 6ee:	66 0f       	add	r22, r22
 6f0:	77 1f       	adc	r23, r23
 6f2:	8a 95       	dec	r24
 6f4:	e2 f7       	brpl	.-8      	; 0x6ee <DIO_TOGGLE+0x6e>
 6f6:	cb 01       	movw	r24, r22
 6f8:	84 27       	eor	r24, r20
 6fa:	82 bb       	out	0x12, r24	; 18
 6fc:	08 95       	ret

000006fe <Timer_INITIALIZE>:
#include <math.h>

//INTIALIZATION
void Timer_INITIALIZE(void)
{
	COUNTER=0x00;
 6fe:	13 be       	out	0x33, r1	; 51
 700:	08 95       	ret

00000702 <Timer_ON>:
}
//TIMER DELAY
void Timer_ON(uint32_t TIME)
{
 702:	8f 92       	push	r8
 704:	9f 92       	push	r9
 706:	af 92       	push	r10
 708:	bf 92       	push	r11
 70a:	cf 92       	push	r12
 70c:	df 92       	push	r13
 70e:	ef 92       	push	r14
 710:	ff 92       	push	r15
	//CALCULATION OF MAXIMUM DELAY TIME
	TT = 256.0/1000.0;   //TIME NEEDED FOR ONE TICK
	MAX = TT*(2*2*2*2*2*2*2*2);	
	
	//GET To & NO. OF COUNTS
	if (MAX == TIME)
 712:	bc 01       	movw	r22, r24
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	90 e0       	ldi	r25, 0x00	; 0
 718:	0e 94 66 05 	call	0xacc	; 0xacc <__floatunsisf>
 71c:	6b 01       	movw	r12, r22
 71e:	7c 01       	movw	r14, r24
 720:	2f e6       	ldi	r18, 0x6F	; 111
 722:	32 e1       	ldi	r19, 0x12	; 18
 724:	43 e8       	ldi	r20, 0x83	; 131
 726:	52 e4       	ldi	r21, 0x42	; 66
 728:	0e 94 c0 04 	call	0x980	; 0x980 <__cmpsf2>
 72c:	88 23       	and	r24, r24
 72e:	09 f4       	brne	.+2      	; 0x732 <Timer_ON+0x30>
 730:	42 c0       	rjmp	.+132    	; 0x7b6 <Timer_ON+0xb4>
	{
		To = 0;
		NO_FLAGS = 1;
	}
	else if (MAX < TIME)
 732:	2f e6       	ldi	r18, 0x6F	; 111
 734:	32 e1       	ldi	r19, 0x12	; 18
 736:	43 e8       	ldi	r20, 0x83	; 131
 738:	52 e4       	ldi	r21, 0x42	; 66
 73a:	c7 01       	movw	r24, r14
 73c:	b6 01       	movw	r22, r12
 73e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__gesf2>
 742:	18 16       	cp	r1, r24
 744:	0c f5       	brge	.+66     	; 0x788 <Timer_ON+0x86>
	{
		NO_FLAGS = ceil(TIME/MAX);
 746:	2f e6       	ldi	r18, 0x6F	; 111
 748:	32 e1       	ldi	r19, 0x12	; 18
 74a:	43 e8       	ldi	r20, 0x83	; 131
 74c:	52 e4       	ldi	r21, 0x42	; 66
 74e:	c7 01       	movw	r24, r14
 750:	b6 01       	movw	r22, r12
 752:	0e 94 c5 04 	call	0x98a	; 0x98a <__divsf3>
 756:	0e 94 a9 04 	call	0x952	; 0x952 <ceil>
 75a:	4b 01       	movw	r8, r22
 75c:	5c 01       	movw	r10, r24
		To = (1 << 8) - (TIME/TT)/NO_FLAGS;
 75e:	2f e6       	ldi	r18, 0x6F	; 111
 760:	32 e1       	ldi	r19, 0x12	; 18
 762:	43 e8       	ldi	r20, 0x83	; 131
 764:	5e e3       	ldi	r21, 0x3E	; 62
 766:	c7 01       	movw	r24, r14
 768:	b6 01       	movw	r22, r12
 76a:	0e 94 c5 04 	call	0x98a	; 0x98a <__divsf3>
 76e:	a5 01       	movw	r20, r10
 770:	94 01       	movw	r18, r8
 772:	0e 94 c5 04 	call	0x98a	; 0x98a <__divsf3>
 776:	9b 01       	movw	r18, r22
 778:	ac 01       	movw	r20, r24
 77a:	60 e0       	ldi	r22, 0x00	; 0
 77c:	70 e0       	ldi	r23, 0x00	; 0
 77e:	80 e8       	ldi	r24, 0x80	; 128
 780:	93 e4       	ldi	r25, 0x43	; 67
 782:	0e 94 3c 04 	call	0x878	; 0x878 <__subsf3>
 786:	22 c0       	rjmp	.+68     	; 0x7cc <Timer_ON+0xca>
	}
	else
	{
		To = (MAX - TIME)/TT;
 788:	a7 01       	movw	r20, r14
 78a:	96 01       	movw	r18, r12
 78c:	6f e6       	ldi	r22, 0x6F	; 111
 78e:	72 e1       	ldi	r23, 0x12	; 18
 790:	83 e8       	ldi	r24, 0x83	; 131
 792:	92 e4       	ldi	r25, 0x42	; 66
 794:	0e 94 3c 04 	call	0x878	; 0x878 <__subsf3>
 798:	2f e6       	ldi	r18, 0x6F	; 111
 79a:	32 e1       	ldi	r19, 0x12	; 18
 79c:	43 e8       	ldi	r20, 0x83	; 131
 79e:	5e e3       	ldi	r21, 0x3E	; 62
 7a0:	0e 94 c5 04 	call	0x98a	; 0x98a <__divsf3>
		NO_FLAGS = 1;
 7a4:	0f 2e       	mov	r0, r31
 7a6:	81 2c       	mov	r8, r1
 7a8:	91 2c       	mov	r9, r1
 7aa:	f0 e8       	ldi	r31, 0x80	; 128
 7ac:	af 2e       	mov	r10, r31
 7ae:	ff e3       	ldi	r31, 0x3F	; 63
 7b0:	bf 2e       	mov	r11, r31
 7b2:	f0 2d       	mov	r31, r0
 7b4:	0b c0       	rjmp	.+22     	; 0x7cc <Timer_ON+0xca>
	
	//GET To & NO. OF COUNTS
	if (MAX == TIME)
	{
		To = 0;
		NO_FLAGS = 1;
 7b6:	0f 2e       	mov	r0, r31
 7b8:	81 2c       	mov	r8, r1
 7ba:	91 2c       	mov	r9, r1
 7bc:	f0 e8       	ldi	r31, 0x80	; 128
 7be:	af 2e       	mov	r10, r31
 7c0:	ff e3       	ldi	r31, 0x3F	; 63
 7c2:	bf 2e       	mov	r11, r31
 7c4:	f0 2d       	mov	r31, r0
	MAX = TT*(2*2*2*2*2*2*2*2);	
	
	//GET To & NO. OF COUNTS
	if (MAX == TIME)
	{
		To = 0;
 7c6:	60 e0       	ldi	r22, 0x00	; 0
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	cb 01       	movw	r24, r22
		To = (MAX - TIME)/TT;
		NO_FLAGS = 1;
	} 
	
	//SETTING To
	CONTROL = To;        // TIMER 0 CONTROL REGISTER VALUE = To
 7cc:	0e 94 37 05 	call	0xa6e	; 0xa6e <__fixunssfsi>
 7d0:	62 bf       	out	0x32, r22	; 50
	SET(COUNTER,2);      //SETTING TIMER 0 COUNTER REGISTER BY 2
 7d2:	83 b7       	in	r24, 0x33	; 51
 7d4:	84 60       	ori	r24, 0x04	; 4
 7d6:	83 bf       	out	0x33, r24	; 51
}
//TIMER DELAY
void Timer_ON(uint32_t TIME)
{
	//DEFINIG VARIABLES
	double COUNTS_NO = 0, TT=0, MAX=0, To=0, NO_FLAGS=0;
 7d8:	c1 2c       	mov	r12, r1
 7da:	d1 2c       	mov	r13, r1
 7dc:	76 01       	movw	r14, r12
	//SETTING To
	CONTROL = To;        // TIMER 0 CONTROL REGISTER VALUE = To
	SET(COUNTER,2);      //SETTING TIMER 0 COUNTER REGISTER BY 2
				         
	//NO. OF COUNTS
	while(NO_FLAGS > COUNTS_NO)
 7de:	13 c0       	rjmp	.+38     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
	{
		//STARTING TIMER
		SET(FLAG,0);
 7e0:	88 b7       	in	r24, 0x38	; 56
 7e2:	81 60       	ori	r24, 0x01	; 1
 7e4:	88 bf       	out	0x38, r24	; 56

		//WAITING
		while (GET(FLAG,0) == 0);
 7e6:	08 b6       	in	r0, 0x38	; 56
 7e8:	00 fe       	sbrs	r0, 0
 7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <Timer_ON+0xe4>
		
		//CLEAR
		SET(FLAG,0);
 7ec:	88 b7       	in	r24, 0x38	; 56
 7ee:	81 60       	ori	r24, 0x01	; 1
 7f0:	88 bf       	out	0x38, r24	; 56
		COUNTS_NO++;
 7f2:	20 e0       	ldi	r18, 0x00	; 0
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	40 e8       	ldi	r20, 0x80	; 128
 7f8:	5f e3       	ldi	r21, 0x3F	; 63
 7fa:	c7 01       	movw	r24, r14
 7fc:	b6 01       	movw	r22, r12
 7fe:	0e 94 3d 04 	call	0x87a	; 0x87a <__addsf3>
 802:	6b 01       	movw	r12, r22
 804:	7c 01       	movw	r14, r24
	//SETTING To
	CONTROL = To;        // TIMER 0 CONTROL REGISTER VALUE = To
	SET(COUNTER,2);      //SETTING TIMER 0 COUNTER REGISTER BY 2
				         
	//NO. OF COUNTS
	while(NO_FLAGS > COUNTS_NO)
 806:	a5 01       	movw	r20, r10
 808:	94 01       	movw	r18, r8
 80a:	c7 01       	movw	r24, r14
 80c:	b6 01       	movw	r22, r12
 80e:	0e 94 c0 04 	call	0x980	; 0x980 <__cmpsf2>
 812:	88 23       	and	r24, r24
 814:	2c f3       	brlt	.-54     	; 0x7e0 <Timer_ON+0xde>
		//CLEAR
		SET(FLAG,0);
		COUNTS_NO++;
	}
	//STOP
	COUNTER = 0x00;
 816:	13 be       	out	0x33, r1	; 51
}
 818:	ff 90       	pop	r15
 81a:	ef 90       	pop	r14
 81c:	df 90       	pop	r13
 81e:	cf 90       	pop	r12
 820:	bf 90       	pop	r11
 822:	af 90       	pop	r10
 824:	9f 90       	pop	r9
 826:	8f 90       	pop	r8
 828:	08 95       	ret

0000082a <BUTTON_INITIALIZE>:

uint8_t I = 0;

//INITIALIZATION
void BUTTON_INITIALIZE(uint8_t buttonPort, uint8_t buttonPin)
{
 82a:	98 2f       	mov	r25, r24
 82c:	86 2f       	mov	r24, r22
	DIO_INITIALIZE(buttonPin, buttonPort, IN);
 82e:	40 e0       	ldi	r20, 0x00	; 0
 830:	69 2f       	mov	r22, r25
 832:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_INITIALIZE>
 836:	08 95       	ret

00000838 <LED_INITIALIZE>:

#include "LED.h"

//INITIALIZATION
void LED_INITIALIZE(uint8_t ledPort, uint8_t ledPin)
{
 838:	98 2f       	mov	r25, r24
 83a:	86 2f       	mov	r24, r22
	DIO_INITIALIZE(ledPin, ledPort, OUT);
 83c:	41 e0       	ldi	r20, 0x01	; 1
 83e:	69 2f       	mov	r22, r25
 840:	0e 94 2a 02 	call	0x454	; 0x454 <DIO_INITIALIZE>
 844:	08 95       	ret

00000846 <LED_ON>:
}

//LED ON
void LED_ON(uint8_t ledPort, uint8_t ledPin)
{
 846:	98 2f       	mov	r25, r24
 848:	86 2f       	mov	r24, r22
	DIO_WRITE(ledPin, ledPort, HIGH);
 84a:	41 e0       	ldi	r20, 0x01	; 1
 84c:	69 2f       	mov	r22, r25
 84e:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_WRITE>
 852:	08 95       	ret

00000854 <LED_OFF>:
}

//LED OFF
void LED_OFF(uint8_t ledPort, uint8_t ledPin)
{
 854:	98 2f       	mov	r25, r24
 856:	86 2f       	mov	r24, r22
	DIO_WRITE(ledPin, ledPort, LOW);
 858:	40 e0       	ldi	r20, 0x00	; 0
 85a:	69 2f       	mov	r22, r25
 85c:	0e 94 b5 02 	call	0x56a	; 0x56a <DIO_WRITE>
 860:	08 95       	ret

00000862 <LED_TOGGLE>:
}

//LED TOGGLE
void LED_TOGGLE(uint8_t ledPort, uint8_t ledPin)
{
 862:	98 2f       	mov	r25, r24
 864:	86 2f       	mov	r24, r22
	DIO_TOGGLE(ledPin, ledPort);
 866:	69 2f       	mov	r22, r25
 868:	0e 94 40 03 	call	0x680	; 0x680 <DIO_TOGGLE>
 86c:	08 95       	ret

0000086e <main>:


int main(void)
{
    //INITIALIZATION
	APP_INITIALIZE();
 86e:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_INITIALIZE>
    while (1) 
    {
		//STARTING APPLICATION
		APP_START();
 872:	0e 94 64 00 	call	0xc8	; 0xc8 <APP_START>
 876:	fd cf       	rjmp	.-6      	; 0x872 <main+0x4>

00000878 <__subsf3>:
 878:	50 58       	subi	r21, 0x80	; 128

0000087a <__addsf3>:
 87a:	bb 27       	eor	r27, r27
 87c:	aa 27       	eor	r26, r26
 87e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <__addsf3x>
 882:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_round>
 886:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fp_pscA>
 88a:	38 f0       	brcs	.+14     	; 0x89a <__addsf3+0x20>
 88c:	0e 94 00 06 	call	0xc00	; 0xc00 <__fp_pscB>
 890:	20 f0       	brcs	.+8      	; 0x89a <__addsf3+0x20>
 892:	39 f4       	brne	.+14     	; 0x8a2 <__addsf3+0x28>
 894:	9f 3f       	cpi	r25, 0xFF	; 255
 896:	19 f4       	brne	.+6      	; 0x89e <__addsf3+0x24>
 898:	26 f4       	brtc	.+8      	; 0x8a2 <__addsf3+0x28>
 89a:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_nan>
 89e:	0e f4       	brtc	.+2      	; 0x8a2 <__addsf3+0x28>
 8a0:	e0 95       	com	r30
 8a2:	e7 fb       	bst	r30, 7
 8a4:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>

000008a8 <__addsf3x>:
 8a8:	e9 2f       	mov	r30, r25
 8aa:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_split3>
 8ae:	58 f3       	brcs	.-42     	; 0x886 <__addsf3+0xc>
 8b0:	ba 17       	cp	r27, r26
 8b2:	62 07       	cpc	r22, r18
 8b4:	73 07       	cpc	r23, r19
 8b6:	84 07       	cpc	r24, r20
 8b8:	95 07       	cpc	r25, r21
 8ba:	20 f0       	brcs	.+8      	; 0x8c4 <__addsf3x+0x1c>
 8bc:	79 f4       	brne	.+30     	; 0x8dc <__addsf3x+0x34>
 8be:	a6 f5       	brtc	.+104    	; 0x928 <__addsf3x+0x80>
 8c0:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_zero>
 8c4:	0e f4       	brtc	.+2      	; 0x8c8 <__addsf3x+0x20>
 8c6:	e0 95       	com	r30
 8c8:	0b 2e       	mov	r0, r27
 8ca:	ba 2f       	mov	r27, r26
 8cc:	a0 2d       	mov	r26, r0
 8ce:	0b 01       	movw	r0, r22
 8d0:	b9 01       	movw	r22, r18
 8d2:	90 01       	movw	r18, r0
 8d4:	0c 01       	movw	r0, r24
 8d6:	ca 01       	movw	r24, r20
 8d8:	a0 01       	movw	r20, r0
 8da:	11 24       	eor	r1, r1
 8dc:	ff 27       	eor	r31, r31
 8de:	59 1b       	sub	r21, r25
 8e0:	99 f0       	breq	.+38     	; 0x908 <__addsf3x+0x60>
 8e2:	59 3f       	cpi	r21, 0xF9	; 249
 8e4:	50 f4       	brcc	.+20     	; 0x8fa <__addsf3x+0x52>
 8e6:	50 3e       	cpi	r21, 0xE0	; 224
 8e8:	68 f1       	brcs	.+90     	; 0x944 <__addsf3x+0x9c>
 8ea:	1a 16       	cp	r1, r26
 8ec:	f0 40       	sbci	r31, 0x00	; 0
 8ee:	a2 2f       	mov	r26, r18
 8f0:	23 2f       	mov	r18, r19
 8f2:	34 2f       	mov	r19, r20
 8f4:	44 27       	eor	r20, r20
 8f6:	58 5f       	subi	r21, 0xF8	; 248
 8f8:	f3 cf       	rjmp	.-26     	; 0x8e0 <__addsf3x+0x38>
 8fa:	46 95       	lsr	r20
 8fc:	37 95       	ror	r19
 8fe:	27 95       	ror	r18
 900:	a7 95       	ror	r26
 902:	f0 40       	sbci	r31, 0x00	; 0
 904:	53 95       	inc	r21
 906:	c9 f7       	brne	.-14     	; 0x8fa <__addsf3x+0x52>
 908:	7e f4       	brtc	.+30     	; 0x928 <__addsf3x+0x80>
 90a:	1f 16       	cp	r1, r31
 90c:	ba 0b       	sbc	r27, r26
 90e:	62 0b       	sbc	r22, r18
 910:	73 0b       	sbc	r23, r19
 912:	84 0b       	sbc	r24, r20
 914:	ba f0       	brmi	.+46     	; 0x944 <__addsf3x+0x9c>
 916:	91 50       	subi	r25, 0x01	; 1
 918:	a1 f0       	breq	.+40     	; 0x942 <__addsf3x+0x9a>
 91a:	ff 0f       	add	r31, r31
 91c:	bb 1f       	adc	r27, r27
 91e:	66 1f       	adc	r22, r22
 920:	77 1f       	adc	r23, r23
 922:	88 1f       	adc	r24, r24
 924:	c2 f7       	brpl	.-16     	; 0x916 <__addsf3x+0x6e>
 926:	0e c0       	rjmp	.+28     	; 0x944 <__addsf3x+0x9c>
 928:	ba 0f       	add	r27, r26
 92a:	62 1f       	adc	r22, r18
 92c:	73 1f       	adc	r23, r19
 92e:	84 1f       	adc	r24, r20
 930:	48 f4       	brcc	.+18     	; 0x944 <__addsf3x+0x9c>
 932:	87 95       	ror	r24
 934:	77 95       	ror	r23
 936:	67 95       	ror	r22
 938:	b7 95       	ror	r27
 93a:	f7 95       	ror	r31
 93c:	9e 3f       	cpi	r25, 0xFE	; 254
 93e:	08 f0       	brcs	.+2      	; 0x942 <__addsf3x+0x9a>
 940:	b0 cf       	rjmp	.-160    	; 0x8a2 <__addsf3+0x28>
 942:	93 95       	inc	r25
 944:	88 0f       	add	r24, r24
 946:	08 f0       	brcs	.+2      	; 0x94a <__addsf3x+0xa2>
 948:	99 27       	eor	r25, r25
 94a:	ee 0f       	add	r30, r30
 94c:	97 95       	ror	r25
 94e:	87 95       	ror	r24
 950:	08 95       	ret

00000952 <ceil>:
 952:	0e 94 3a 06 	call	0xc74	; 0xc74 <__fp_trunc>
 956:	90 f0       	brcs	.+36     	; 0x97c <ceil+0x2a>
 958:	9f 37       	cpi	r25, 0x7F	; 127
 95a:	48 f4       	brcc	.+18     	; 0x96e <ceil+0x1c>
 95c:	91 11       	cpse	r25, r1
 95e:	16 f4       	brtc	.+4      	; 0x964 <ceil+0x12>
 960:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_szero>
 964:	60 e0       	ldi	r22, 0x00	; 0
 966:	70 e0       	ldi	r23, 0x00	; 0
 968:	80 e8       	ldi	r24, 0x80	; 128
 96a:	9f e3       	ldi	r25, 0x3F	; 63
 96c:	08 95       	ret
 96e:	26 f0       	brts	.+8      	; 0x978 <ceil+0x26>
 970:	1b 16       	cp	r1, r27
 972:	61 1d       	adc	r22, r1
 974:	71 1d       	adc	r23, r1
 976:	81 1d       	adc	r24, r1
 978:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_mintl>
 97c:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <__fp_mpack>

00000980 <__cmpsf2>:
 980:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_cmp>
 984:	08 f4       	brcc	.+2      	; 0x988 <__cmpsf2+0x8>
 986:	81 e0       	ldi	r24, 0x01	; 1
 988:	08 95       	ret

0000098a <__divsf3>:
 98a:	0e 94 d9 04 	call	0x9b2	; 0x9b2 <__divsf3x>
 98e:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__fp_round>
 992:	0e 94 00 06 	call	0xc00	; 0xc00 <__fp_pscB>
 996:	58 f0       	brcs	.+22     	; 0x9ae <__divsf3+0x24>
 998:	0e 94 f9 05 	call	0xbf2	; 0xbf2 <__fp_pscA>
 99c:	40 f0       	brcs	.+16     	; 0x9ae <__divsf3+0x24>
 99e:	29 f4       	brne	.+10     	; 0x9aa <__divsf3+0x20>
 9a0:	5f 3f       	cpi	r21, 0xFF	; 255
 9a2:	29 f0       	breq	.+10     	; 0x9ae <__divsf3+0x24>
 9a4:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
 9a8:	51 11       	cpse	r21, r1
 9aa:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_szero>
 9ae:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_nan>

000009b2 <__divsf3x>:
 9b2:	0e 94 18 06 	call	0xc30	; 0xc30 <__fp_split3>
 9b6:	68 f3       	brcs	.-38     	; 0x992 <__divsf3+0x8>

000009b8 <__divsf3_pse>:
 9b8:	99 23       	and	r25, r25
 9ba:	b1 f3       	breq	.-20     	; 0x9a8 <__divsf3+0x1e>
 9bc:	55 23       	and	r21, r21
 9be:	91 f3       	breq	.-28     	; 0x9a4 <__divsf3+0x1a>
 9c0:	95 1b       	sub	r25, r21
 9c2:	55 0b       	sbc	r21, r21
 9c4:	bb 27       	eor	r27, r27
 9c6:	aa 27       	eor	r26, r26
 9c8:	62 17       	cp	r22, r18
 9ca:	73 07       	cpc	r23, r19
 9cc:	84 07       	cpc	r24, r20
 9ce:	38 f0       	brcs	.+14     	; 0x9de <__divsf3_pse+0x26>
 9d0:	9f 5f       	subi	r25, 0xFF	; 255
 9d2:	5f 4f       	sbci	r21, 0xFF	; 255
 9d4:	22 0f       	add	r18, r18
 9d6:	33 1f       	adc	r19, r19
 9d8:	44 1f       	adc	r20, r20
 9da:	aa 1f       	adc	r26, r26
 9dc:	a9 f3       	breq	.-22     	; 0x9c8 <__divsf3_pse+0x10>
 9de:	35 d0       	rcall	.+106    	; 0xa4a <__divsf3_pse+0x92>
 9e0:	0e 2e       	mov	r0, r30
 9e2:	3a f0       	brmi	.+14     	; 0x9f2 <__divsf3_pse+0x3a>
 9e4:	e0 e8       	ldi	r30, 0x80	; 128
 9e6:	32 d0       	rcall	.+100    	; 0xa4c <__divsf3_pse+0x94>
 9e8:	91 50       	subi	r25, 0x01	; 1
 9ea:	50 40       	sbci	r21, 0x00	; 0
 9ec:	e6 95       	lsr	r30
 9ee:	00 1c       	adc	r0, r0
 9f0:	ca f7       	brpl	.-14     	; 0x9e4 <__divsf3_pse+0x2c>
 9f2:	2b d0       	rcall	.+86     	; 0xa4a <__divsf3_pse+0x92>
 9f4:	fe 2f       	mov	r31, r30
 9f6:	29 d0       	rcall	.+82     	; 0xa4a <__divsf3_pse+0x92>
 9f8:	66 0f       	add	r22, r22
 9fa:	77 1f       	adc	r23, r23
 9fc:	88 1f       	adc	r24, r24
 9fe:	bb 1f       	adc	r27, r27
 a00:	26 17       	cp	r18, r22
 a02:	37 07       	cpc	r19, r23
 a04:	48 07       	cpc	r20, r24
 a06:	ab 07       	cpc	r26, r27
 a08:	b0 e8       	ldi	r27, 0x80	; 128
 a0a:	09 f0       	breq	.+2      	; 0xa0e <__divsf3_pse+0x56>
 a0c:	bb 0b       	sbc	r27, r27
 a0e:	80 2d       	mov	r24, r0
 a10:	bf 01       	movw	r22, r30
 a12:	ff 27       	eor	r31, r31
 a14:	93 58       	subi	r25, 0x83	; 131
 a16:	5f 4f       	sbci	r21, 0xFF	; 255
 a18:	3a f0       	brmi	.+14     	; 0xa28 <__divsf3_pse+0x70>
 a1a:	9e 3f       	cpi	r25, 0xFE	; 254
 a1c:	51 05       	cpc	r21, r1
 a1e:	78 f0       	brcs	.+30     	; 0xa3e <__divsf3_pse+0x86>
 a20:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
 a24:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__fp_szero>
 a28:	5f 3f       	cpi	r21, 0xFF	; 255
 a2a:	e4 f3       	brlt	.-8      	; 0xa24 <__divsf3_pse+0x6c>
 a2c:	98 3e       	cpi	r25, 0xE8	; 232
 a2e:	d4 f3       	brlt	.-12     	; 0xa24 <__divsf3_pse+0x6c>
 a30:	86 95       	lsr	r24
 a32:	77 95       	ror	r23
 a34:	67 95       	ror	r22
 a36:	b7 95       	ror	r27
 a38:	f7 95       	ror	r31
 a3a:	9f 5f       	subi	r25, 0xFF	; 255
 a3c:	c9 f7       	brne	.-14     	; 0xa30 <__divsf3_pse+0x78>
 a3e:	88 0f       	add	r24, r24
 a40:	91 1d       	adc	r25, r1
 a42:	96 95       	lsr	r25
 a44:	87 95       	ror	r24
 a46:	97 f9       	bld	r25, 7
 a48:	08 95       	ret
 a4a:	e1 e0       	ldi	r30, 0x01	; 1
 a4c:	66 0f       	add	r22, r22
 a4e:	77 1f       	adc	r23, r23
 a50:	88 1f       	adc	r24, r24
 a52:	bb 1f       	adc	r27, r27
 a54:	62 17       	cp	r22, r18
 a56:	73 07       	cpc	r23, r19
 a58:	84 07       	cpc	r24, r20
 a5a:	ba 07       	cpc	r27, r26
 a5c:	20 f0       	brcs	.+8      	; 0xa66 <__divsf3_pse+0xae>
 a5e:	62 1b       	sub	r22, r18
 a60:	73 0b       	sbc	r23, r19
 a62:	84 0b       	sbc	r24, r20
 a64:	ba 0b       	sbc	r27, r26
 a66:	ee 1f       	adc	r30, r30
 a68:	88 f7       	brcc	.-30     	; 0xa4c <__divsf3_pse+0x94>
 a6a:	e0 95       	com	r30
 a6c:	08 95       	ret

00000a6e <__fixunssfsi>:
 a6e:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_splitA>
 a72:	88 f0       	brcs	.+34     	; 0xa96 <__fixunssfsi+0x28>
 a74:	9f 57       	subi	r25, 0x7F	; 127
 a76:	98 f0       	brcs	.+38     	; 0xa9e <__fixunssfsi+0x30>
 a78:	b9 2f       	mov	r27, r25
 a7a:	99 27       	eor	r25, r25
 a7c:	b7 51       	subi	r27, 0x17	; 23
 a7e:	b0 f0       	brcs	.+44     	; 0xaac <__fixunssfsi+0x3e>
 a80:	e1 f0       	breq	.+56     	; 0xaba <__fixunssfsi+0x4c>
 a82:	66 0f       	add	r22, r22
 a84:	77 1f       	adc	r23, r23
 a86:	88 1f       	adc	r24, r24
 a88:	99 1f       	adc	r25, r25
 a8a:	1a f0       	brmi	.+6      	; 0xa92 <__fixunssfsi+0x24>
 a8c:	ba 95       	dec	r27
 a8e:	c9 f7       	brne	.-14     	; 0xa82 <__fixunssfsi+0x14>
 a90:	14 c0       	rjmp	.+40     	; 0xaba <__fixunssfsi+0x4c>
 a92:	b1 30       	cpi	r27, 0x01	; 1
 a94:	91 f0       	breq	.+36     	; 0xaba <__fixunssfsi+0x4c>
 a96:	0e 94 52 06 	call	0xca4	; 0xca4 <__fp_zero>
 a9a:	b1 e0       	ldi	r27, 0x01	; 1
 a9c:	08 95       	ret
 a9e:	0c 94 52 06 	jmp	0xca4	; 0xca4 <__fp_zero>
 aa2:	67 2f       	mov	r22, r23
 aa4:	78 2f       	mov	r23, r24
 aa6:	88 27       	eor	r24, r24
 aa8:	b8 5f       	subi	r27, 0xF8	; 248
 aaa:	39 f0       	breq	.+14     	; 0xaba <__fixunssfsi+0x4c>
 aac:	b9 3f       	cpi	r27, 0xF9	; 249
 aae:	cc f3       	brlt	.-14     	; 0xaa2 <__fixunssfsi+0x34>
 ab0:	86 95       	lsr	r24
 ab2:	77 95       	ror	r23
 ab4:	67 95       	ror	r22
 ab6:	b3 95       	inc	r27
 ab8:	d9 f7       	brne	.-10     	; 0xab0 <__fixunssfsi+0x42>
 aba:	3e f4       	brtc	.+14     	; 0xaca <__fixunssfsi+0x5c>
 abc:	90 95       	com	r25
 abe:	80 95       	com	r24
 ac0:	70 95       	com	r23
 ac2:	61 95       	neg	r22
 ac4:	7f 4f       	sbci	r23, 0xFF	; 255
 ac6:	8f 4f       	sbci	r24, 0xFF	; 255
 ac8:	9f 4f       	sbci	r25, 0xFF	; 255
 aca:	08 95       	ret

00000acc <__floatunsisf>:
 acc:	e8 94       	clt
 ace:	09 c0       	rjmp	.+18     	; 0xae2 <__floatsisf+0x12>

00000ad0 <__floatsisf>:
 ad0:	97 fb       	bst	r25, 7
 ad2:	3e f4       	brtc	.+14     	; 0xae2 <__floatsisf+0x12>
 ad4:	90 95       	com	r25
 ad6:	80 95       	com	r24
 ad8:	70 95       	com	r23
 ada:	61 95       	neg	r22
 adc:	7f 4f       	sbci	r23, 0xFF	; 255
 ade:	8f 4f       	sbci	r24, 0xFF	; 255
 ae0:	9f 4f       	sbci	r25, 0xFF	; 255
 ae2:	99 23       	and	r25, r25
 ae4:	a9 f0       	breq	.+42     	; 0xb10 <__floatsisf+0x40>
 ae6:	f9 2f       	mov	r31, r25
 ae8:	96 e9       	ldi	r25, 0x96	; 150
 aea:	bb 27       	eor	r27, r27
 aec:	93 95       	inc	r25
 aee:	f6 95       	lsr	r31
 af0:	87 95       	ror	r24
 af2:	77 95       	ror	r23
 af4:	67 95       	ror	r22
 af6:	b7 95       	ror	r27
 af8:	f1 11       	cpse	r31, r1
 afa:	f8 cf       	rjmp	.-16     	; 0xaec <__floatsisf+0x1c>
 afc:	fa f4       	brpl	.+62     	; 0xb3c <__floatsisf+0x6c>
 afe:	bb 0f       	add	r27, r27
 b00:	11 f4       	brne	.+4      	; 0xb06 <__floatsisf+0x36>
 b02:	60 ff       	sbrs	r22, 0
 b04:	1b c0       	rjmp	.+54     	; 0xb3c <__floatsisf+0x6c>
 b06:	6f 5f       	subi	r22, 0xFF	; 255
 b08:	7f 4f       	sbci	r23, 0xFF	; 255
 b0a:	8f 4f       	sbci	r24, 0xFF	; 255
 b0c:	9f 4f       	sbci	r25, 0xFF	; 255
 b0e:	16 c0       	rjmp	.+44     	; 0xb3c <__floatsisf+0x6c>
 b10:	88 23       	and	r24, r24
 b12:	11 f0       	breq	.+4      	; 0xb18 <__floatsisf+0x48>
 b14:	96 e9       	ldi	r25, 0x96	; 150
 b16:	11 c0       	rjmp	.+34     	; 0xb3a <__floatsisf+0x6a>
 b18:	77 23       	and	r23, r23
 b1a:	21 f0       	breq	.+8      	; 0xb24 <__floatsisf+0x54>
 b1c:	9e e8       	ldi	r25, 0x8E	; 142
 b1e:	87 2f       	mov	r24, r23
 b20:	76 2f       	mov	r23, r22
 b22:	05 c0       	rjmp	.+10     	; 0xb2e <__floatsisf+0x5e>
 b24:	66 23       	and	r22, r22
 b26:	71 f0       	breq	.+28     	; 0xb44 <__floatsisf+0x74>
 b28:	96 e8       	ldi	r25, 0x86	; 134
 b2a:	86 2f       	mov	r24, r22
 b2c:	70 e0       	ldi	r23, 0x00	; 0
 b2e:	60 e0       	ldi	r22, 0x00	; 0
 b30:	2a f0       	brmi	.+10     	; 0xb3c <__floatsisf+0x6c>
 b32:	9a 95       	dec	r25
 b34:	66 0f       	add	r22, r22
 b36:	77 1f       	adc	r23, r23
 b38:	88 1f       	adc	r24, r24
 b3a:	da f7       	brpl	.-10     	; 0xb32 <__floatsisf+0x62>
 b3c:	88 0f       	add	r24, r24
 b3e:	96 95       	lsr	r25
 b40:	87 95       	ror	r24
 b42:	97 f9       	bld	r25, 7
 b44:	08 95       	ret

00000b46 <__fp_cmp>:
 b46:	99 0f       	add	r25, r25
 b48:	00 08       	sbc	r0, r0
 b4a:	55 0f       	add	r21, r21
 b4c:	aa 0b       	sbc	r26, r26
 b4e:	e0 e8       	ldi	r30, 0x80	; 128
 b50:	fe ef       	ldi	r31, 0xFE	; 254
 b52:	16 16       	cp	r1, r22
 b54:	17 06       	cpc	r1, r23
 b56:	e8 07       	cpc	r30, r24
 b58:	f9 07       	cpc	r31, r25
 b5a:	c0 f0       	brcs	.+48     	; 0xb8c <__fp_cmp+0x46>
 b5c:	12 16       	cp	r1, r18
 b5e:	13 06       	cpc	r1, r19
 b60:	e4 07       	cpc	r30, r20
 b62:	f5 07       	cpc	r31, r21
 b64:	98 f0       	brcs	.+38     	; 0xb8c <__fp_cmp+0x46>
 b66:	62 1b       	sub	r22, r18
 b68:	73 0b       	sbc	r23, r19
 b6a:	84 0b       	sbc	r24, r20
 b6c:	95 0b       	sbc	r25, r21
 b6e:	39 f4       	brne	.+14     	; 0xb7e <__fp_cmp+0x38>
 b70:	0a 26       	eor	r0, r26
 b72:	61 f0       	breq	.+24     	; 0xb8c <__fp_cmp+0x46>
 b74:	23 2b       	or	r18, r19
 b76:	24 2b       	or	r18, r20
 b78:	25 2b       	or	r18, r21
 b7a:	21 f4       	brne	.+8      	; 0xb84 <__fp_cmp+0x3e>
 b7c:	08 95       	ret
 b7e:	0a 26       	eor	r0, r26
 b80:	09 f4       	brne	.+2      	; 0xb84 <__fp_cmp+0x3e>
 b82:	a1 40       	sbci	r26, 0x01	; 1
 b84:	a6 95       	lsr	r26
 b86:	8f ef       	ldi	r24, 0xFF	; 255
 b88:	81 1d       	adc	r24, r1
 b8a:	81 1d       	adc	r24, r1
 b8c:	08 95       	ret

00000b8e <__fp_inf>:
 b8e:	97 f9       	bld	r25, 7
 b90:	9f 67       	ori	r25, 0x7F	; 127
 b92:	80 e8       	ldi	r24, 0x80	; 128
 b94:	70 e0       	ldi	r23, 0x00	; 0
 b96:	60 e0       	ldi	r22, 0x00	; 0
 b98:	08 95       	ret

00000b9a <__fp_mintl>:
 b9a:	88 23       	and	r24, r24
 b9c:	71 f4       	brne	.+28     	; 0xbba <__fp_mintl+0x20>
 b9e:	77 23       	and	r23, r23
 ba0:	21 f0       	breq	.+8      	; 0xbaa <__fp_mintl+0x10>
 ba2:	98 50       	subi	r25, 0x08	; 8
 ba4:	87 2b       	or	r24, r23
 ba6:	76 2f       	mov	r23, r22
 ba8:	07 c0       	rjmp	.+14     	; 0xbb8 <__fp_mintl+0x1e>
 baa:	66 23       	and	r22, r22
 bac:	11 f4       	brne	.+4      	; 0xbb2 <__fp_mintl+0x18>
 bae:	99 27       	eor	r25, r25
 bb0:	0d c0       	rjmp	.+26     	; 0xbcc <__fp_mintl+0x32>
 bb2:	90 51       	subi	r25, 0x10	; 16
 bb4:	86 2b       	or	r24, r22
 bb6:	70 e0       	ldi	r23, 0x00	; 0
 bb8:	60 e0       	ldi	r22, 0x00	; 0
 bba:	2a f0       	brmi	.+10     	; 0xbc6 <__fp_mintl+0x2c>
 bbc:	9a 95       	dec	r25
 bbe:	66 0f       	add	r22, r22
 bc0:	77 1f       	adc	r23, r23
 bc2:	88 1f       	adc	r24, r24
 bc4:	da f7       	brpl	.-10     	; 0xbbc <__fp_mintl+0x22>
 bc6:	88 0f       	add	r24, r24
 bc8:	96 95       	lsr	r25
 bca:	87 95       	ror	r24
 bcc:	97 f9       	bld	r25, 7
 bce:	08 95       	ret

00000bd0 <__fp_mpack>:
 bd0:	9f 3f       	cpi	r25, 0xFF	; 255
 bd2:	31 f0       	breq	.+12     	; 0xbe0 <__fp_mpack_finite+0xc>

00000bd4 <__fp_mpack_finite>:
 bd4:	91 50       	subi	r25, 0x01	; 1
 bd6:	20 f4       	brcc	.+8      	; 0xbe0 <__fp_mpack_finite+0xc>
 bd8:	87 95       	ror	r24
 bda:	77 95       	ror	r23
 bdc:	67 95       	ror	r22
 bde:	b7 95       	ror	r27
 be0:	88 0f       	add	r24, r24
 be2:	91 1d       	adc	r25, r1
 be4:	96 95       	lsr	r25
 be6:	87 95       	ror	r24
 be8:	97 f9       	bld	r25, 7
 bea:	08 95       	ret

00000bec <__fp_nan>:
 bec:	9f ef       	ldi	r25, 0xFF	; 255
 bee:	80 ec       	ldi	r24, 0xC0	; 192
 bf0:	08 95       	ret

00000bf2 <__fp_pscA>:
 bf2:	00 24       	eor	r0, r0
 bf4:	0a 94       	dec	r0
 bf6:	16 16       	cp	r1, r22
 bf8:	17 06       	cpc	r1, r23
 bfa:	18 06       	cpc	r1, r24
 bfc:	09 06       	cpc	r0, r25
 bfe:	08 95       	ret

00000c00 <__fp_pscB>:
 c00:	00 24       	eor	r0, r0
 c02:	0a 94       	dec	r0
 c04:	12 16       	cp	r1, r18
 c06:	13 06       	cpc	r1, r19
 c08:	14 06       	cpc	r1, r20
 c0a:	05 06       	cpc	r0, r21
 c0c:	08 95       	ret

00000c0e <__fp_round>:
 c0e:	09 2e       	mov	r0, r25
 c10:	03 94       	inc	r0
 c12:	00 0c       	add	r0, r0
 c14:	11 f4       	brne	.+4      	; 0xc1a <__fp_round+0xc>
 c16:	88 23       	and	r24, r24
 c18:	52 f0       	brmi	.+20     	; 0xc2e <__fp_round+0x20>
 c1a:	bb 0f       	add	r27, r27
 c1c:	40 f4       	brcc	.+16     	; 0xc2e <__fp_round+0x20>
 c1e:	bf 2b       	or	r27, r31
 c20:	11 f4       	brne	.+4      	; 0xc26 <__fp_round+0x18>
 c22:	60 ff       	sbrs	r22, 0
 c24:	04 c0       	rjmp	.+8      	; 0xc2e <__fp_round+0x20>
 c26:	6f 5f       	subi	r22, 0xFF	; 255
 c28:	7f 4f       	sbci	r23, 0xFF	; 255
 c2a:	8f 4f       	sbci	r24, 0xFF	; 255
 c2c:	9f 4f       	sbci	r25, 0xFF	; 255
 c2e:	08 95       	ret

00000c30 <__fp_split3>:
 c30:	57 fd       	sbrc	r21, 7
 c32:	90 58       	subi	r25, 0x80	; 128
 c34:	44 0f       	add	r20, r20
 c36:	55 1f       	adc	r21, r21
 c38:	59 f0       	breq	.+22     	; 0xc50 <__fp_splitA+0x10>
 c3a:	5f 3f       	cpi	r21, 0xFF	; 255
 c3c:	71 f0       	breq	.+28     	; 0xc5a <__fp_splitA+0x1a>
 c3e:	47 95       	ror	r20

00000c40 <__fp_splitA>:
 c40:	88 0f       	add	r24, r24
 c42:	97 fb       	bst	r25, 7
 c44:	99 1f       	adc	r25, r25
 c46:	61 f0       	breq	.+24     	; 0xc60 <__fp_splitA+0x20>
 c48:	9f 3f       	cpi	r25, 0xFF	; 255
 c4a:	79 f0       	breq	.+30     	; 0xc6a <__fp_splitA+0x2a>
 c4c:	87 95       	ror	r24
 c4e:	08 95       	ret
 c50:	12 16       	cp	r1, r18
 c52:	13 06       	cpc	r1, r19
 c54:	14 06       	cpc	r1, r20
 c56:	55 1f       	adc	r21, r21
 c58:	f2 cf       	rjmp	.-28     	; 0xc3e <__fp_split3+0xe>
 c5a:	46 95       	lsr	r20
 c5c:	f1 df       	rcall	.-30     	; 0xc40 <__fp_splitA>
 c5e:	08 c0       	rjmp	.+16     	; 0xc70 <__fp_splitA+0x30>
 c60:	16 16       	cp	r1, r22
 c62:	17 06       	cpc	r1, r23
 c64:	18 06       	cpc	r1, r24
 c66:	99 1f       	adc	r25, r25
 c68:	f1 cf       	rjmp	.-30     	; 0xc4c <__fp_splitA+0xc>
 c6a:	86 95       	lsr	r24
 c6c:	71 05       	cpc	r23, r1
 c6e:	61 05       	cpc	r22, r1
 c70:	08 94       	sec
 c72:	08 95       	ret

00000c74 <__fp_trunc>:
 c74:	0e 94 20 06 	call	0xc40	; 0xc40 <__fp_splitA>
 c78:	a0 f0       	brcs	.+40     	; 0xca2 <__fp_trunc+0x2e>
 c7a:	be e7       	ldi	r27, 0x7E	; 126
 c7c:	b9 17       	cp	r27, r25
 c7e:	88 f4       	brcc	.+34     	; 0xca2 <__fp_trunc+0x2e>
 c80:	bb 27       	eor	r27, r27
 c82:	9f 38       	cpi	r25, 0x8F	; 143
 c84:	60 f4       	brcc	.+24     	; 0xc9e <__fp_trunc+0x2a>
 c86:	16 16       	cp	r1, r22
 c88:	b1 1d       	adc	r27, r1
 c8a:	67 2f       	mov	r22, r23
 c8c:	78 2f       	mov	r23, r24
 c8e:	88 27       	eor	r24, r24
 c90:	98 5f       	subi	r25, 0xF8	; 248
 c92:	f7 cf       	rjmp	.-18     	; 0xc82 <__fp_trunc+0xe>
 c94:	86 95       	lsr	r24
 c96:	77 95       	ror	r23
 c98:	67 95       	ror	r22
 c9a:	b1 1d       	adc	r27, r1
 c9c:	93 95       	inc	r25
 c9e:	96 39       	cpi	r25, 0x96	; 150
 ca0:	c8 f3       	brcs	.-14     	; 0xc94 <__fp_trunc+0x20>
 ca2:	08 95       	ret

00000ca4 <__fp_zero>:
 ca4:	e8 94       	clt

00000ca6 <__fp_szero>:
 ca6:	bb 27       	eor	r27, r27
 ca8:	66 27       	eor	r22, r22
 caa:	77 27       	eor	r23, r23
 cac:	cb 01       	movw	r24, r22
 cae:	97 f9       	bld	r25, 7
 cb0:	08 95       	ret

00000cb2 <__gesf2>:
 cb2:	0e 94 a3 05 	call	0xb46	; 0xb46 <__fp_cmp>
 cb6:	08 f4       	brcc	.+2      	; 0xcba <__gesf2+0x8>
 cb8:	8f ef       	ldi	r24, 0xFF	; 255
 cba:	08 95       	ret

00000cbc <_exit>:
 cbc:	f8 94       	cli

00000cbe <__stop_program>:
 cbe:	ff cf       	rjmp	.-2      	; 0xcbe <__stop_program>
