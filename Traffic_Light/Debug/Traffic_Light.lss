
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000934  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000934  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000964  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d89  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007c0  00000000  00000000  00001831  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000887  00000000  00000000  00001ff1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001bc  00000000  00000000  00002878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000468  00000000  00000000  00002a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a86  00000000  00000000  00002e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00003922  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 15 02 	jmp	0x42a	; 0x42a <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 39 02 	call	0x472	; 0x472 <main>
  74:	0c 94 5e 04 	jmp	0x8bc	; 0x8bc <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_INITIALIZE>:
#include "dio.h"

//INITIALIZATION
void DIO_INITIALIZE(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	switch (portNumber)
  7c:	62 34       	cpi	r22, 0x42	; 66
  7e:	59 f1       	breq	.+86     	; 0xd6 <DIO_INITIALIZE+0x5a>
  80:	18 f4       	brcc	.+6      	; 0x88 <DIO_INITIALIZE+0xc>
  82:	61 34       	cpi	r22, 0x41	; 65
  84:	41 f0       	breq	.+16     	; 0x96 <DIO_INITIALIZE+0x1a>
  86:	08 95       	ret
  88:	63 34       	cpi	r22, 0x43	; 67
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_INITIALIZE+0x12>
  8c:	44 c0       	rjmp	.+136    	; 0x116 <DIO_INITIALIZE+0x9a>
  8e:	64 34       	cpi	r22, 0x44	; 68
  90:	09 f4       	brne	.+2      	; 0x94 <DIO_INITIALIZE+0x18>
  92:	60 c0       	rjmp	.+192    	; 0x154 <DIO_INITIALIZE+0xd8>
  94:	08 95       	ret
	{
		case PORT_A:
			if (direction == IN)
  96:	41 11       	cpse	r20, r1
  98:	0e c0       	rjmp	.+28     	; 0xb6 <DIO_INITIALIZE+0x3a>
			{
				CLEAR(DDRA, pinNumber);
  9a:	4a b3       	in	r20, 0x1a	; 26
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	b9 01       	movw	r22, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_INITIALIZE+0x2c>
  a4:	66 0f       	add	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_INITIALIZE+0x28>
  ac:	cb 01       	movw	r24, r22
  ae:	80 95       	com	r24
  b0:	84 23       	and	r24, r20
  b2:	8a bb       	out	0x1a, r24	; 26
  b4:	08 95       	ret
			}
			else if (direction == OUT)
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	09 f0       	breq	.+2      	; 0xbc <DIO_INITIALIZE+0x40>
  ba:	6a c0       	rjmp	.+212    	; 0x190 <DIO_INITIALIZE+0x114>
			{
				SET(DDRA, pinNumber);
  bc:	4a b3       	in	r20, 0x1a	; 26
  be:	21 e0       	ldi	r18, 0x01	; 1
  c0:	30 e0       	ldi	r19, 0x00	; 0
  c2:	b9 01       	movw	r22, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_INITIALIZE+0x4e>
  c6:	66 0f       	add	r22, r22
  c8:	77 1f       	adc	r23, r23
  ca:	8a 95       	dec	r24
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_INITIALIZE+0x4a>
  ce:	cb 01       	movw	r24, r22
  d0:	84 2b       	or	r24, r20
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_B:
			if (direction == IN)
  d6:	41 11       	cpse	r20, r1
  d8:	0e c0       	rjmp	.+28     	; 0xf6 <DIO_INITIALIZE+0x7a>
			{
				CLEAR(DDRB, pinNumber);
  da:	47 b3       	in	r20, 0x17	; 23
  dc:	21 e0       	ldi	r18, 0x01	; 1
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	b9 01       	movw	r22, r18
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_INITIALIZE+0x6c>
  e4:	66 0f       	add	r22, r22
  e6:	77 1f       	adc	r23, r23
  e8:	8a 95       	dec	r24
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_INITIALIZE+0x68>
  ec:	cb 01       	movw	r24, r22
  ee:	80 95       	com	r24
  f0:	84 23       	and	r24, r20
  f2:	87 bb       	out	0x17, r24	; 23
  f4:	08 95       	ret
			}
			else if (direction == OUT)
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	09 f0       	breq	.+2      	; 0xfc <DIO_INITIALIZE+0x80>
  fa:	4a c0       	rjmp	.+148    	; 0x190 <DIO_INITIALIZE+0x114>
			{
				SET(DDRB, pinNumber);
  fc:	47 b3       	in	r20, 0x17	; 23
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	b9 01       	movw	r22, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_INITIALIZE+0x8e>
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	8a 95       	dec	r24
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_INITIALIZE+0x8a>
 10e:	cb 01       	movw	r24, r22
 110:	84 2b       	or	r24, r20
 112:	87 bb       	out	0x17, r24	; 23
 114:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_C:
			if (direction == IN)
 116:	41 11       	cpse	r20, r1
 118:	0e c0       	rjmp	.+28     	; 0x136 <DIO_INITIALIZE+0xba>
			{
				CLEAR(DDRC, pinNumber);
 11a:	44 b3       	in	r20, 0x14	; 20
 11c:	21 e0       	ldi	r18, 0x01	; 1
 11e:	30 e0       	ldi	r19, 0x00	; 0
 120:	b9 01       	movw	r22, r18
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_INITIALIZE+0xac>
 124:	66 0f       	add	r22, r22
 126:	77 1f       	adc	r23, r23
 128:	8a 95       	dec	r24
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_INITIALIZE+0xa8>
 12c:	cb 01       	movw	r24, r22
 12e:	80 95       	com	r24
 130:	84 23       	and	r24, r20
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
			}
			else if (direction == OUT)
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	59 f5       	brne	.+86     	; 0x190 <DIO_INITIALIZE+0x114>
			{
				SET(DDRC, pinNumber);
 13a:	44 b3       	in	r20, 0x14	; 20
 13c:	21 e0       	ldi	r18, 0x01	; 1
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	b9 01       	movw	r22, r18
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_INITIALIZE+0xcc>
 144:	66 0f       	add	r22, r22
 146:	77 1f       	adc	r23, r23
 148:	8a 95       	dec	r24
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_INITIALIZE+0xc8>
 14c:	cb 01       	movw	r24, r22
 14e:	84 2b       	or	r24, r20
 150:	84 bb       	out	0x14, r24	; 20
 152:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_D:
			if (direction == IN)
 154:	41 11       	cpse	r20, r1
 156:	0e c0       	rjmp	.+28     	; 0x174 <DIO_INITIALIZE+0xf8>
			{
				CLEAR(DDRD, pinNumber);
 158:	41 b3       	in	r20, 0x11	; 17
 15a:	21 e0       	ldi	r18, 0x01	; 1
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	b9 01       	movw	r22, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <DIO_INITIALIZE+0xea>
 162:	66 0f       	add	r22, r22
 164:	77 1f       	adc	r23, r23
 166:	8a 95       	dec	r24
 168:	e2 f7       	brpl	.-8      	; 0x162 <DIO_INITIALIZE+0xe6>
 16a:	cb 01       	movw	r24, r22
 16c:	80 95       	com	r24
 16e:	84 23       	and	r24, r20
 170:	81 bb       	out	0x11, r24	; 17
 172:	08 95       	ret
			}
			else if (direction == OUT)
 174:	41 30       	cpi	r20, 0x01	; 1
 176:	61 f4       	brne	.+24     	; 0x190 <DIO_INITIALIZE+0x114>
			{
				SET(DDRD, pinNumber);
 178:	41 b3       	in	r20, 0x11	; 17
 17a:	21 e0       	ldi	r18, 0x01	; 1
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	b9 01       	movw	r22, r18
 180:	02 c0       	rjmp	.+4      	; 0x186 <DIO_INITIALIZE+0x10a>
 182:	66 0f       	add	r22, r22
 184:	77 1f       	adc	r23, r23
 186:	8a 95       	dec	r24
 188:	e2 f7       	brpl	.-8      	; 0x182 <DIO_INITIALIZE+0x106>
 18a:	cb 01       	movw	r24, r22
 18c:	84 2b       	or	r24, r20
 18e:	81 bb       	out	0x11, r24	; 17
 190:	08 95       	ret

00000192 <DIO_WRITE>:
}

//CHANGE DIO STATE
void DIO_WRITE(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	switch (portNumber)
 192:	62 34       	cpi	r22, 0x42	; 66
 194:	59 f1       	breq	.+86     	; 0x1ec <DIO_WRITE+0x5a>
 196:	18 f4       	brcc	.+6      	; 0x19e <DIO_WRITE+0xc>
 198:	61 34       	cpi	r22, 0x41	; 65
 19a:	41 f0       	breq	.+16     	; 0x1ac <DIO_WRITE+0x1a>
 19c:	08 95       	ret
 19e:	63 34       	cpi	r22, 0x43	; 67
 1a0:	09 f4       	brne	.+2      	; 0x1a4 <DIO_WRITE+0x12>
 1a2:	44 c0       	rjmp	.+136    	; 0x22c <DIO_WRITE+0x9a>
 1a4:	64 34       	cpi	r22, 0x44	; 68
 1a6:	09 f4       	brne	.+2      	; 0x1aa <DIO_WRITE+0x18>
 1a8:	60 c0       	rjmp	.+192    	; 0x26a <DIO_WRITE+0xd8>
 1aa:	08 95       	ret
	{
		case PORT_A:
		if(value == LOW)
 1ac:	41 11       	cpse	r20, r1
 1ae:	0e c0       	rjmp	.+28     	; 0x1cc <DIO_WRITE+0x3a>
		{
			CLEAR(PORTA, pinNumber);
 1b0:	4b b3       	in	r20, 0x1b	; 27
 1b2:	21 e0       	ldi	r18, 0x01	; 1
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	b9 01       	movw	r22, r18
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_WRITE+0x2c>
 1ba:	66 0f       	add	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	8a 95       	dec	r24
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_WRITE+0x28>
 1c2:	cb 01       	movw	r24, r22
 1c4:	80 95       	com	r24
 1c6:	84 23       	and	r24, r20
 1c8:	8b bb       	out	0x1b, r24	; 27
 1ca:	08 95       	ret
		}
		else if (value == HIGH)
 1cc:	41 30       	cpi	r20, 0x01	; 1
 1ce:	09 f0       	breq	.+2      	; 0x1d2 <DIO_WRITE+0x40>
 1d0:	6a c0       	rjmp	.+212    	; 0x2a6 <DIO_WRITE+0x114>
		{
			SET(PORTA, pinNumber);
 1d2:	4b b3       	in	r20, 0x1b	; 27
 1d4:	21 e0       	ldi	r18, 0x01	; 1
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	b9 01       	movw	r22, r18
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <DIO_WRITE+0x4e>
 1dc:	66 0f       	add	r22, r22
 1de:	77 1f       	adc	r23, r23
 1e0:	8a 95       	dec	r24
 1e2:	e2 f7       	brpl	.-8      	; 0x1dc <DIO_WRITE+0x4a>
 1e4:	cb 01       	movw	r24, r22
 1e6:	84 2b       	or	r24, r20
 1e8:	8b bb       	out	0x1b, r24	; 27
 1ea:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_B:
		if(value == LOW)
 1ec:	41 11       	cpse	r20, r1
 1ee:	0e c0       	rjmp	.+28     	; 0x20c <DIO_WRITE+0x7a>
		{
			CLEAR(PORTB, pinNumber);
 1f0:	48 b3       	in	r20, 0x18	; 24
 1f2:	21 e0       	ldi	r18, 0x01	; 1
 1f4:	30 e0       	ldi	r19, 0x00	; 0
 1f6:	b9 01       	movw	r22, r18
 1f8:	02 c0       	rjmp	.+4      	; 0x1fe <DIO_WRITE+0x6c>
 1fa:	66 0f       	add	r22, r22
 1fc:	77 1f       	adc	r23, r23
 1fe:	8a 95       	dec	r24
 200:	e2 f7       	brpl	.-8      	; 0x1fa <DIO_WRITE+0x68>
 202:	cb 01       	movw	r24, r22
 204:	80 95       	com	r24
 206:	84 23       	and	r24, r20
 208:	88 bb       	out	0x18, r24	; 24
 20a:	08 95       	ret
		}
		else if (value == HIGH)
 20c:	41 30       	cpi	r20, 0x01	; 1
 20e:	09 f0       	breq	.+2      	; 0x212 <DIO_WRITE+0x80>
 210:	4a c0       	rjmp	.+148    	; 0x2a6 <DIO_WRITE+0x114>
		{
			SET(PORTB, pinNumber);
 212:	48 b3       	in	r20, 0x18	; 24
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	b9 01       	movw	r22, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_WRITE+0x8e>
 21c:	66 0f       	add	r22, r22
 21e:	77 1f       	adc	r23, r23
 220:	8a 95       	dec	r24
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_WRITE+0x8a>
 224:	cb 01       	movw	r24, r22
 226:	84 2b       	or	r24, r20
 228:	88 bb       	out	0x18, r24	; 24
 22a:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_C:
		if(value == LOW)
 22c:	41 11       	cpse	r20, r1
 22e:	0e c0       	rjmp	.+28     	; 0x24c <DIO_WRITE+0xba>
		{
			CLEAR(PORTC, pinNumber);
 230:	45 b3       	in	r20, 0x15	; 21
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	30 e0       	ldi	r19, 0x00	; 0
 236:	b9 01       	movw	r22, r18
 238:	02 c0       	rjmp	.+4      	; 0x23e <DIO_WRITE+0xac>
 23a:	66 0f       	add	r22, r22
 23c:	77 1f       	adc	r23, r23
 23e:	8a 95       	dec	r24
 240:	e2 f7       	brpl	.-8      	; 0x23a <DIO_WRITE+0xa8>
 242:	cb 01       	movw	r24, r22
 244:	80 95       	com	r24
 246:	84 23       	and	r24, r20
 248:	85 bb       	out	0x15, r24	; 21
 24a:	08 95       	ret
		}
		else if (value == HIGH)
 24c:	41 30       	cpi	r20, 0x01	; 1
 24e:	59 f5       	brne	.+86     	; 0x2a6 <DIO_WRITE+0x114>
		{
			SET(PORTC, pinNumber);
 250:	45 b3       	in	r20, 0x15	; 21
 252:	21 e0       	ldi	r18, 0x01	; 1
 254:	30 e0       	ldi	r19, 0x00	; 0
 256:	b9 01       	movw	r22, r18
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_WRITE+0xcc>
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	8a 95       	dec	r24
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_WRITE+0xc8>
 262:	cb 01       	movw	r24, r22
 264:	84 2b       	or	r24, r20
 266:	85 bb       	out	0x15, r24	; 21
 268:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_D:
		if(value == LOW)
 26a:	41 11       	cpse	r20, r1
 26c:	0e c0       	rjmp	.+28     	; 0x28a <DIO_WRITE+0xf8>
		{
			CLEAR(PORTD, pinNumber);
 26e:	42 b3       	in	r20, 0x12	; 18
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	b9 01       	movw	r22, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_WRITE+0xea>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	8a 95       	dec	r24
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_WRITE+0xe6>
 280:	cb 01       	movw	r24, r22
 282:	80 95       	com	r24
 284:	84 23       	and	r24, r20
 286:	82 bb       	out	0x12, r24	; 18
 288:	08 95       	ret
		}
		else if (value == HIGH)
 28a:	41 30       	cpi	r20, 0x01	; 1
 28c:	61 f4       	brne	.+24     	; 0x2a6 <DIO_WRITE+0x114>
		{
			SET(PORTD, pinNumber);
 28e:	42 b3       	in	r20, 0x12	; 18
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	b9 01       	movw	r22, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_WRITE+0x10a>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	8a 95       	dec	r24
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_WRITE+0x106>
 2a0:	cb 01       	movw	r24, r22
 2a2:	84 2b       	or	r24, r20
 2a4:	82 bb       	out	0x12, r24	; 18
 2a6:	08 95       	ret

000002a8 <Timer_INITIALIZE>:
#include <math.h>

//INTIALIZATION
void Timer_INITIALIZE(void)
{
	COUNTER=0x00;
 2a8:	13 be       	out	0x33, r1	; 51
 2aa:	08 95       	ret

000002ac <Timer_ON>:
}
//TIMER DELAY
void Timer_ON(uint32_t TIME)
{
 2ac:	8f 92       	push	r8
 2ae:	9f 92       	push	r9
 2b0:	af 92       	push	r10
 2b2:	bf 92       	push	r11
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
	//CALCULATION OF MAXIMUM DELAY TIME
	TT = 256.0/1000.0;   //TIME NEEDED FOR ONE TICK
	MAX = TT*(2*2*2*2*2*2*2*2);	
	
	//GET To & NO. OF COUNTS
	if (MAX == TIME)
 2bc:	bc 01       	movw	r22, r24
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	0e 94 66 03 	call	0x6cc	; 0x6cc <__floatunsisf>
 2c6:	6b 01       	movw	r12, r22
 2c8:	7c 01       	movw	r14, r24
 2ca:	2f e6       	ldi	r18, 0x6F	; 111
 2cc:	32 e1       	ldi	r19, 0x12	; 18
 2ce:	43 e8       	ldi	r20, 0x83	; 131
 2d0:	52 e4       	ldi	r21, 0x42	; 66
 2d2:	0e 94 c0 02 	call	0x580	; 0x580 <__cmpsf2>
 2d6:	88 23       	and	r24, r24
 2d8:	09 f4       	brne	.+2      	; 0x2dc <Timer_ON+0x30>
 2da:	42 c0       	rjmp	.+132    	; 0x360 <Timer_ON+0xb4>
	{
		To = 0;
		NO_FLAGS = 1;
	}
	else if (MAX < TIME)
 2dc:	2f e6       	ldi	r18, 0x6F	; 111
 2de:	32 e1       	ldi	r19, 0x12	; 18
 2e0:	43 e8       	ldi	r20, 0x83	; 131
 2e2:	52 e4       	ldi	r21, 0x42	; 66
 2e4:	c7 01       	movw	r24, r14
 2e6:	b6 01       	movw	r22, r12
 2e8:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__gesf2>
 2ec:	18 16       	cp	r1, r24
 2ee:	0c f5       	brge	.+66     	; 0x332 <Timer_ON+0x86>
	{
		NO_FLAGS = ceil(TIME/MAX);
 2f0:	2f e6       	ldi	r18, 0x6F	; 111
 2f2:	32 e1       	ldi	r19, 0x12	; 18
 2f4:	43 e8       	ldi	r20, 0x83	; 131
 2f6:	52 e4       	ldi	r21, 0x42	; 66
 2f8:	c7 01       	movw	r24, r14
 2fa:	b6 01       	movw	r22, r12
 2fc:	0e 94 c5 02 	call	0x58a	; 0x58a <__divsf3>
 300:	0e 94 a9 02 	call	0x552	; 0x552 <ceil>
 304:	4b 01       	movw	r8, r22
 306:	5c 01       	movw	r10, r24
		To = (1 << 8) - (TIME/TT)/NO_FLAGS;
 308:	2f e6       	ldi	r18, 0x6F	; 111
 30a:	32 e1       	ldi	r19, 0x12	; 18
 30c:	43 e8       	ldi	r20, 0x83	; 131
 30e:	5e e3       	ldi	r21, 0x3E	; 62
 310:	c7 01       	movw	r24, r14
 312:	b6 01       	movw	r22, r12
 314:	0e 94 c5 02 	call	0x58a	; 0x58a <__divsf3>
 318:	a5 01       	movw	r20, r10
 31a:	94 01       	movw	r18, r8
 31c:	0e 94 c5 02 	call	0x58a	; 0x58a <__divsf3>
 320:	9b 01       	movw	r18, r22
 322:	ac 01       	movw	r20, r24
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	70 e0       	ldi	r23, 0x00	; 0
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	93 e4       	ldi	r25, 0x43	; 67
 32c:	0e 94 3c 02 	call	0x478	; 0x478 <__subsf3>
 330:	22 c0       	rjmp	.+68     	; 0x376 <Timer_ON+0xca>
	}
	else
	{
		To = (MAX - TIME)/TT;
 332:	a7 01       	movw	r20, r14
 334:	96 01       	movw	r18, r12
 336:	6f e6       	ldi	r22, 0x6F	; 111
 338:	72 e1       	ldi	r23, 0x12	; 18
 33a:	83 e8       	ldi	r24, 0x83	; 131
 33c:	92 e4       	ldi	r25, 0x42	; 66
 33e:	0e 94 3c 02 	call	0x478	; 0x478 <__subsf3>
 342:	2f e6       	ldi	r18, 0x6F	; 111
 344:	32 e1       	ldi	r19, 0x12	; 18
 346:	43 e8       	ldi	r20, 0x83	; 131
 348:	5e e3       	ldi	r21, 0x3E	; 62
 34a:	0e 94 c5 02 	call	0x58a	; 0x58a <__divsf3>
		NO_FLAGS = 1;
 34e:	0f 2e       	mov	r0, r31
 350:	81 2c       	mov	r8, r1
 352:	91 2c       	mov	r9, r1
 354:	f0 e8       	ldi	r31, 0x80	; 128
 356:	af 2e       	mov	r10, r31
 358:	ff e3       	ldi	r31, 0x3F	; 63
 35a:	bf 2e       	mov	r11, r31
 35c:	f0 2d       	mov	r31, r0
 35e:	0b c0       	rjmp	.+22     	; 0x376 <Timer_ON+0xca>
	
	//GET To & NO. OF COUNTS
	if (MAX == TIME)
	{
		To = 0;
		NO_FLAGS = 1;
 360:	0f 2e       	mov	r0, r31
 362:	81 2c       	mov	r8, r1
 364:	91 2c       	mov	r9, r1
 366:	f0 e8       	ldi	r31, 0x80	; 128
 368:	af 2e       	mov	r10, r31
 36a:	ff e3       	ldi	r31, 0x3F	; 63
 36c:	bf 2e       	mov	r11, r31
 36e:	f0 2d       	mov	r31, r0
	MAX = TT*(2*2*2*2*2*2*2*2);	
	
	//GET To & NO. OF COUNTS
	if (MAX == TIME)
	{
		To = 0;
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	70 e0       	ldi	r23, 0x00	; 0
 374:	cb 01       	movw	r24, r22
		To = (MAX - TIME)/TT;
		NO_FLAGS = 1;
	} 
	
	//SETTING To
	CONTROL = To;        // TIMER 0 CONTROL REGISTER VALUE = To
 376:	0e 94 37 03 	call	0x66e	; 0x66e <__fixunssfsi>
 37a:	62 bf       	out	0x32, r22	; 50
	SET(COUNTER,2);      //SETTING TIMER 0 COUNTER REGISTER BY 2
 37c:	83 b7       	in	r24, 0x33	; 51
 37e:	84 60       	ori	r24, 0x04	; 4
 380:	83 bf       	out	0x33, r24	; 51
}
//TIMER DELAY
void Timer_ON(uint32_t TIME)
{
	//DEFINIG VARIABLES
	double COUNTS_NO = 0, TT=0, MAX=0, To=0, NO_FLAGS=0;
 382:	c1 2c       	mov	r12, r1
 384:	d1 2c       	mov	r13, r1
 386:	76 01       	movw	r14, r12
	//SETTING To
	CONTROL = To;        // TIMER 0 CONTROL REGISTER VALUE = To
	SET(COUNTER,2);      //SETTING TIMER 0 COUNTER REGISTER BY 2
				         
	//NO. OF COUNTS
	while(NO_FLAGS > COUNTS_NO)
 388:	13 c0       	rjmp	.+38     	; 0x3b0 <Timer_ON+0x104>
	{
		//STARTING TIMER
		SET(FLAG,0);
 38a:	88 b7       	in	r24, 0x38	; 56
 38c:	81 60       	ori	r24, 0x01	; 1
 38e:	88 bf       	out	0x38, r24	; 56

		//WAITING
		while (GET(FLAG,0) == 0);
 390:	08 b6       	in	r0, 0x38	; 56
 392:	00 fe       	sbrs	r0, 0
 394:	fd cf       	rjmp	.-6      	; 0x390 <Timer_ON+0xe4>
		
		//CLEAR
		SET(FLAG,0);
 396:	88 b7       	in	r24, 0x38	; 56
 398:	81 60       	ori	r24, 0x01	; 1
 39a:	88 bf       	out	0x38, r24	; 56
		COUNTS_NO++;
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	40 e8       	ldi	r20, 0x80	; 128
 3a2:	5f e3       	ldi	r21, 0x3F	; 63
 3a4:	c7 01       	movw	r24, r14
 3a6:	b6 01       	movw	r22, r12
 3a8:	0e 94 3d 02 	call	0x47a	; 0x47a <__addsf3>
 3ac:	6b 01       	movw	r12, r22
 3ae:	7c 01       	movw	r14, r24
	//SETTING To
	CONTROL = To;        // TIMER 0 CONTROL REGISTER VALUE = To
	SET(COUNTER,2);      //SETTING TIMER 0 COUNTER REGISTER BY 2
				         
	//NO. OF COUNTS
	while(NO_FLAGS > COUNTS_NO)
 3b0:	a5 01       	movw	r20, r10
 3b2:	94 01       	movw	r18, r8
 3b4:	c7 01       	movw	r24, r14
 3b6:	b6 01       	movw	r22, r12
 3b8:	0e 94 c0 02 	call	0x580	; 0x580 <__cmpsf2>
 3bc:	88 23       	and	r24, r24
 3be:	2c f3       	brlt	.-54     	; 0x38a <Timer_ON+0xde>
		//CLEAR
		SET(FLAG,0);
		COUNTS_NO++;
	}
	//STOP
	COUNTER = 0x00;
 3c0:	13 be       	out	0x33, r1	; 51
}
 3c2:	ff 90       	pop	r15
 3c4:	ef 90       	pop	r14
 3c6:	df 90       	pop	r13
 3c8:	cf 90       	pop	r12
 3ca:	bf 90       	pop	r11
 3cc:	af 90       	pop	r10
 3ce:	9f 90       	pop	r9
 3d0:	8f 90       	pop	r8
 3d2:	08 95       	ret

000003d4 <BUTTON_INITIALIZE>:
		
		//Timer_ON(2000);
		//LED_TOGGLE(LED_CAR, LED_GREEN_CAR);
		
		LED_OFF(LED_CAR, LED_GREEN_CAR);
		Timer_ON(2000);
 3d4:	98 2f       	mov	r25, r24
 3d6:	86 2f       	mov	r24, r22
 3d8:	40 e0       	ldi	r20, 0x00	; 0
 3da:	69 2f       	mov	r22, r25
 3dc:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_INITIALIZE>
 3e0:	08 95       	ret

000003e2 <TEST_BUTTON_INTERRUPT>:
}

void TEST_BUTTON_INTERRUPT (void)
{
	
	BUTTON_INITIALIZE(BUTTON_PORT, BUTTON_PIN);
 3e2:	62 e0       	ldi	r22, 0x02	; 2
 3e4:	84 e4       	ldi	r24, 0x44	; 68
 3e6:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <BUTTON_INITIALIZE>
	LED_INITIALIZE(LED_PEDESTRIANS, LED_YELLOW_PEDESTRIANS);
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	82 e4       	ldi	r24, 0x42	; 66
 3ee:	0e 94 24 02 	call	0x448	; 0x448 <LED_INITIALIZE>
	Timer_INITIALIZE();
 3f2:	0e 94 54 01 	call	0x2a8	; 0x2a8 <Timer_INITIALIZE>
	SEI();
 3f6:	78 94       	sei
	RISING_EDGE();
 3f8:	85 b7       	in	r24, 0x35	; 53
 3fa:	83 60       	ori	r24, 0x03	; 3
 3fc:	85 bf       	out	0x35, r24	; 53
	SETUP();
 3fe:	8b b7       	in	r24, 0x3b	; 59
 400:	80 64       	ori	r24, 0x40	; 64
 402:	8b bf       	out	0x3b, r24	; 59
	LED_ON(LED_PEDESTRIANS, LED_YELLOW_PEDESTRIANS);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	82 e4       	ldi	r24, 0x42	; 66
 408:	0e 94 2b 02 	call	0x456	; 0x456 <LED_ON>
	if (I == HIGH)
 40c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	51 f4       	brne	.+20     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
	{
		LED_OFF(LED_PEDESTRIANS, LED_YELLOW_PEDESTRIANS);
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	82 e4       	ldi	r24, 0x42	; 66
 418:	0e 94 32 02 	call	0x464	; 0x464 <LED_OFF>
		Timer_ON(2000);
 41c:	80 ed       	ldi	r24, 0xD0	; 208
 41e:	97 e0       	ldi	r25, 0x07	; 7
 420:	0e 94 56 01 	call	0x2ac	; 0x2ac <Timer_ON>
		I=0;
 424:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 428:	08 95       	ret

0000042a <__vector_1>:
	}
}

IFUN(INT0_VECTOR)
{
 42a:	1f 92       	push	r1
 42c:	0f 92       	push	r0
 42e:	0f b6       	in	r0, 0x3f	; 63
 430:	0f 92       	push	r0
 432:	11 24       	eor	r1, r1
 434:	8f 93       	push	r24
	I=1;
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 43c:	8f 91       	pop	r24
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <LED_INITIALIZE>:

#include "LED.h"

//INITIALIZATION
void LED_INITIALIZE(uint8_t ledPort, uint8_t ledPin)
{
 448:	98 2f       	mov	r25, r24
 44a:	86 2f       	mov	r24, r22
	DIO_INITIALIZE(ledPin, ledPort, OUT);
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	69 2f       	mov	r22, r25
 450:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_INITIALIZE>
 454:	08 95       	ret

00000456 <LED_ON>:
}

//LED ON
void LED_ON(uint8_t ledPort, uint8_t ledPin)
{
 456:	98 2f       	mov	r25, r24
 458:	86 2f       	mov	r24, r22
	DIO_WRITE(ledPin, ledPort, HIGH);
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	69 2f       	mov	r22, r25
 45e:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WRITE>
 462:	08 95       	ret

00000464 <LED_OFF>:
}

//LED OFF
void LED_OFF(uint8_t ledPort, uint8_t ledPin)
{
 464:	98 2f       	mov	r25, r24
 466:	86 2f       	mov	r24, r22
	DIO_WRITE(ledPin, ledPort, LOW);
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	69 2f       	mov	r22, r25
 46c:	0e 94 c9 00 	call	0x192	; 0x192 <DIO_WRITE>
 470:	08 95       	ret

00000472 <main>:
		//STARTING APPLICATION
		//APP_START();
		//TEST_LED();
		//TEST_TIMER();
		//TEST_BUTTON();
		TEST_BUTTON_INTERRUPT();
 472:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <TEST_BUTTON_INTERRUPT>
 476:	fd cf       	rjmp	.-6      	; 0x472 <main>

00000478 <__subsf3>:
 478:	50 58       	subi	r21, 0x80	; 128

0000047a <__addsf3>:
 47a:	bb 27       	eor	r27, r27
 47c:	aa 27       	eor	r26, r26
 47e:	0e 94 54 02 	call	0x4a8	; 0x4a8 <__addsf3x>
 482:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_round>
 486:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fp_pscA>
 48a:	38 f0       	brcs	.+14     	; 0x49a <__addsf3+0x20>
 48c:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscB>
 490:	20 f0       	brcs	.+8      	; 0x49a <__addsf3+0x20>
 492:	39 f4       	brne	.+14     	; 0x4a2 <__addsf3+0x28>
 494:	9f 3f       	cpi	r25, 0xFF	; 255
 496:	19 f4       	brne	.+6      	; 0x49e <__addsf3+0x24>
 498:	26 f4       	brtc	.+8      	; 0x4a2 <__addsf3+0x28>
 49a:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_nan>
 49e:	0e f4       	brtc	.+2      	; 0x4a2 <__addsf3+0x28>
 4a0:	e0 95       	com	r30
 4a2:	e7 fb       	bst	r30, 7
 4a4:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_inf>

000004a8 <__addsf3x>:
 4a8:	e9 2f       	mov	r30, r25
 4aa:	0e 94 18 04 	call	0x830	; 0x830 <__fp_split3>
 4ae:	58 f3       	brcs	.-42     	; 0x486 <__addsf3+0xc>
 4b0:	ba 17       	cp	r27, r26
 4b2:	62 07       	cpc	r22, r18
 4b4:	73 07       	cpc	r23, r19
 4b6:	84 07       	cpc	r24, r20
 4b8:	95 07       	cpc	r25, r21
 4ba:	20 f0       	brcs	.+8      	; 0x4c4 <__addsf3x+0x1c>
 4bc:	79 f4       	brne	.+30     	; 0x4dc <__addsf3x+0x34>
 4be:	a6 f5       	brtc	.+104    	; 0x528 <__addsf3x+0x80>
 4c0:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_zero>
 4c4:	0e f4       	brtc	.+2      	; 0x4c8 <__addsf3x+0x20>
 4c6:	e0 95       	com	r30
 4c8:	0b 2e       	mov	r0, r27
 4ca:	ba 2f       	mov	r27, r26
 4cc:	a0 2d       	mov	r26, r0
 4ce:	0b 01       	movw	r0, r22
 4d0:	b9 01       	movw	r22, r18
 4d2:	90 01       	movw	r18, r0
 4d4:	0c 01       	movw	r0, r24
 4d6:	ca 01       	movw	r24, r20
 4d8:	a0 01       	movw	r20, r0
 4da:	11 24       	eor	r1, r1
 4dc:	ff 27       	eor	r31, r31
 4de:	59 1b       	sub	r21, r25
 4e0:	99 f0       	breq	.+38     	; 0x508 <__addsf3x+0x60>
 4e2:	59 3f       	cpi	r21, 0xF9	; 249
 4e4:	50 f4       	brcc	.+20     	; 0x4fa <__addsf3x+0x52>
 4e6:	50 3e       	cpi	r21, 0xE0	; 224
 4e8:	68 f1       	brcs	.+90     	; 0x544 <__addsf3x+0x9c>
 4ea:	1a 16       	cp	r1, r26
 4ec:	f0 40       	sbci	r31, 0x00	; 0
 4ee:	a2 2f       	mov	r26, r18
 4f0:	23 2f       	mov	r18, r19
 4f2:	34 2f       	mov	r19, r20
 4f4:	44 27       	eor	r20, r20
 4f6:	58 5f       	subi	r21, 0xF8	; 248
 4f8:	f3 cf       	rjmp	.-26     	; 0x4e0 <__addsf3x+0x38>
 4fa:	46 95       	lsr	r20
 4fc:	37 95       	ror	r19
 4fe:	27 95       	ror	r18
 500:	a7 95       	ror	r26
 502:	f0 40       	sbci	r31, 0x00	; 0
 504:	53 95       	inc	r21
 506:	c9 f7       	brne	.-14     	; 0x4fa <__addsf3x+0x52>
 508:	7e f4       	brtc	.+30     	; 0x528 <__addsf3x+0x80>
 50a:	1f 16       	cp	r1, r31
 50c:	ba 0b       	sbc	r27, r26
 50e:	62 0b       	sbc	r22, r18
 510:	73 0b       	sbc	r23, r19
 512:	84 0b       	sbc	r24, r20
 514:	ba f0       	brmi	.+46     	; 0x544 <__addsf3x+0x9c>
 516:	91 50       	subi	r25, 0x01	; 1
 518:	a1 f0       	breq	.+40     	; 0x542 <__addsf3x+0x9a>
 51a:	ff 0f       	add	r31, r31
 51c:	bb 1f       	adc	r27, r27
 51e:	66 1f       	adc	r22, r22
 520:	77 1f       	adc	r23, r23
 522:	88 1f       	adc	r24, r24
 524:	c2 f7       	brpl	.-16     	; 0x516 <__addsf3x+0x6e>
 526:	0e c0       	rjmp	.+28     	; 0x544 <__addsf3x+0x9c>
 528:	ba 0f       	add	r27, r26
 52a:	62 1f       	adc	r22, r18
 52c:	73 1f       	adc	r23, r19
 52e:	84 1f       	adc	r24, r20
 530:	48 f4       	brcc	.+18     	; 0x544 <__addsf3x+0x9c>
 532:	87 95       	ror	r24
 534:	77 95       	ror	r23
 536:	67 95       	ror	r22
 538:	b7 95       	ror	r27
 53a:	f7 95       	ror	r31
 53c:	9e 3f       	cpi	r25, 0xFE	; 254
 53e:	08 f0       	brcs	.+2      	; 0x542 <__addsf3x+0x9a>
 540:	b0 cf       	rjmp	.-160    	; 0x4a2 <__addsf3+0x28>
 542:	93 95       	inc	r25
 544:	88 0f       	add	r24, r24
 546:	08 f0       	brcs	.+2      	; 0x54a <__addsf3x+0xa2>
 548:	99 27       	eor	r25, r25
 54a:	ee 0f       	add	r30, r30
 54c:	97 95       	ror	r25
 54e:	87 95       	ror	r24
 550:	08 95       	ret

00000552 <ceil>:
 552:	0e 94 3a 04 	call	0x874	; 0x874 <__fp_trunc>
 556:	90 f0       	brcs	.+36     	; 0x57c <ceil+0x2a>
 558:	9f 37       	cpi	r25, 0x7F	; 127
 55a:	48 f4       	brcc	.+18     	; 0x56e <ceil+0x1c>
 55c:	91 11       	cpse	r25, r1
 55e:	16 f4       	brtc	.+4      	; 0x564 <ceil+0x12>
 560:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_szero>
 564:	60 e0       	ldi	r22, 0x00	; 0
 566:	70 e0       	ldi	r23, 0x00	; 0
 568:	80 e8       	ldi	r24, 0x80	; 128
 56a:	9f e3       	ldi	r25, 0x3F	; 63
 56c:	08 95       	ret
 56e:	26 f0       	brts	.+8      	; 0x578 <ceil+0x26>
 570:	1b 16       	cp	r1, r27
 572:	61 1d       	adc	r22, r1
 574:	71 1d       	adc	r23, r1
 576:	81 1d       	adc	r24, r1
 578:	0c 94 cd 03 	jmp	0x79a	; 0x79a <__fp_mintl>
 57c:	0c 94 e8 03 	jmp	0x7d0	; 0x7d0 <__fp_mpack>

00000580 <__cmpsf2>:
 580:	0e 94 a3 03 	call	0x746	; 0x746 <__fp_cmp>
 584:	08 f4       	brcc	.+2      	; 0x588 <__cmpsf2+0x8>
 586:	81 e0       	ldi	r24, 0x01	; 1
 588:	08 95       	ret

0000058a <__divsf3>:
 58a:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__divsf3x>
 58e:	0c 94 07 04 	jmp	0x80e	; 0x80e <__fp_round>
 592:	0e 94 00 04 	call	0x800	; 0x800 <__fp_pscB>
 596:	58 f0       	brcs	.+22     	; 0x5ae <__divsf3+0x24>
 598:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fp_pscA>
 59c:	40 f0       	brcs	.+16     	; 0x5ae <__divsf3+0x24>
 59e:	29 f4       	brne	.+10     	; 0x5aa <__divsf3+0x20>
 5a0:	5f 3f       	cpi	r21, 0xFF	; 255
 5a2:	29 f0       	breq	.+10     	; 0x5ae <__divsf3+0x24>
 5a4:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_inf>
 5a8:	51 11       	cpse	r21, r1
 5aa:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_szero>
 5ae:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <__fp_nan>

000005b2 <__divsf3x>:
 5b2:	0e 94 18 04 	call	0x830	; 0x830 <__fp_split3>
 5b6:	68 f3       	brcs	.-38     	; 0x592 <__divsf3+0x8>

000005b8 <__divsf3_pse>:
 5b8:	99 23       	and	r25, r25
 5ba:	b1 f3       	breq	.-20     	; 0x5a8 <__divsf3+0x1e>
 5bc:	55 23       	and	r21, r21
 5be:	91 f3       	breq	.-28     	; 0x5a4 <__divsf3+0x1a>
 5c0:	95 1b       	sub	r25, r21
 5c2:	55 0b       	sbc	r21, r21
 5c4:	bb 27       	eor	r27, r27
 5c6:	aa 27       	eor	r26, r26
 5c8:	62 17       	cp	r22, r18
 5ca:	73 07       	cpc	r23, r19
 5cc:	84 07       	cpc	r24, r20
 5ce:	38 f0       	brcs	.+14     	; 0x5de <__divsf3_pse+0x26>
 5d0:	9f 5f       	subi	r25, 0xFF	; 255
 5d2:	5f 4f       	sbci	r21, 0xFF	; 255
 5d4:	22 0f       	add	r18, r18
 5d6:	33 1f       	adc	r19, r19
 5d8:	44 1f       	adc	r20, r20
 5da:	aa 1f       	adc	r26, r26
 5dc:	a9 f3       	breq	.-22     	; 0x5c8 <__divsf3_pse+0x10>
 5de:	35 d0       	rcall	.+106    	; 0x64a <__divsf3_pse+0x92>
 5e0:	0e 2e       	mov	r0, r30
 5e2:	3a f0       	brmi	.+14     	; 0x5f2 <__divsf3_pse+0x3a>
 5e4:	e0 e8       	ldi	r30, 0x80	; 128
 5e6:	32 d0       	rcall	.+100    	; 0x64c <__divsf3_pse+0x94>
 5e8:	91 50       	subi	r25, 0x01	; 1
 5ea:	50 40       	sbci	r21, 0x00	; 0
 5ec:	e6 95       	lsr	r30
 5ee:	00 1c       	adc	r0, r0
 5f0:	ca f7       	brpl	.-14     	; 0x5e4 <__divsf3_pse+0x2c>
 5f2:	2b d0       	rcall	.+86     	; 0x64a <__divsf3_pse+0x92>
 5f4:	fe 2f       	mov	r31, r30
 5f6:	29 d0       	rcall	.+82     	; 0x64a <__divsf3_pse+0x92>
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	bb 1f       	adc	r27, r27
 600:	26 17       	cp	r18, r22
 602:	37 07       	cpc	r19, r23
 604:	48 07       	cpc	r20, r24
 606:	ab 07       	cpc	r26, r27
 608:	b0 e8       	ldi	r27, 0x80	; 128
 60a:	09 f0       	breq	.+2      	; 0x60e <__divsf3_pse+0x56>
 60c:	bb 0b       	sbc	r27, r27
 60e:	80 2d       	mov	r24, r0
 610:	bf 01       	movw	r22, r30
 612:	ff 27       	eor	r31, r31
 614:	93 58       	subi	r25, 0x83	; 131
 616:	5f 4f       	sbci	r21, 0xFF	; 255
 618:	3a f0       	brmi	.+14     	; 0x628 <__divsf3_pse+0x70>
 61a:	9e 3f       	cpi	r25, 0xFE	; 254
 61c:	51 05       	cpc	r21, r1
 61e:	78 f0       	brcs	.+30     	; 0x63e <__divsf3_pse+0x86>
 620:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__fp_inf>
 624:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__fp_szero>
 628:	5f 3f       	cpi	r21, 0xFF	; 255
 62a:	e4 f3       	brlt	.-8      	; 0x624 <__divsf3_pse+0x6c>
 62c:	98 3e       	cpi	r25, 0xE8	; 232
 62e:	d4 f3       	brlt	.-12     	; 0x624 <__divsf3_pse+0x6c>
 630:	86 95       	lsr	r24
 632:	77 95       	ror	r23
 634:	67 95       	ror	r22
 636:	b7 95       	ror	r27
 638:	f7 95       	ror	r31
 63a:	9f 5f       	subi	r25, 0xFF	; 255
 63c:	c9 f7       	brne	.-14     	; 0x630 <__divsf3_pse+0x78>
 63e:	88 0f       	add	r24, r24
 640:	91 1d       	adc	r25, r1
 642:	96 95       	lsr	r25
 644:	87 95       	ror	r24
 646:	97 f9       	bld	r25, 7
 648:	08 95       	ret
 64a:	e1 e0       	ldi	r30, 0x01	; 1
 64c:	66 0f       	add	r22, r22
 64e:	77 1f       	adc	r23, r23
 650:	88 1f       	adc	r24, r24
 652:	bb 1f       	adc	r27, r27
 654:	62 17       	cp	r22, r18
 656:	73 07       	cpc	r23, r19
 658:	84 07       	cpc	r24, r20
 65a:	ba 07       	cpc	r27, r26
 65c:	20 f0       	brcs	.+8      	; 0x666 <__divsf3_pse+0xae>
 65e:	62 1b       	sub	r22, r18
 660:	73 0b       	sbc	r23, r19
 662:	84 0b       	sbc	r24, r20
 664:	ba 0b       	sbc	r27, r26
 666:	ee 1f       	adc	r30, r30
 668:	88 f7       	brcc	.-30     	; 0x64c <__divsf3_pse+0x94>
 66a:	e0 95       	com	r30
 66c:	08 95       	ret

0000066e <__fixunssfsi>:
 66e:	0e 94 20 04 	call	0x840	; 0x840 <__fp_splitA>
 672:	88 f0       	brcs	.+34     	; 0x696 <__fixunssfsi+0x28>
 674:	9f 57       	subi	r25, 0x7F	; 127
 676:	98 f0       	brcs	.+38     	; 0x69e <__fixunssfsi+0x30>
 678:	b9 2f       	mov	r27, r25
 67a:	99 27       	eor	r25, r25
 67c:	b7 51       	subi	r27, 0x17	; 23
 67e:	b0 f0       	brcs	.+44     	; 0x6ac <__fixunssfsi+0x3e>
 680:	e1 f0       	breq	.+56     	; 0x6ba <__fixunssfsi+0x4c>
 682:	66 0f       	add	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	1a f0       	brmi	.+6      	; 0x692 <__fixunssfsi+0x24>
 68c:	ba 95       	dec	r27
 68e:	c9 f7       	brne	.-14     	; 0x682 <__fixunssfsi+0x14>
 690:	14 c0       	rjmp	.+40     	; 0x6ba <__fixunssfsi+0x4c>
 692:	b1 30       	cpi	r27, 0x01	; 1
 694:	91 f0       	breq	.+36     	; 0x6ba <__fixunssfsi+0x4c>
 696:	0e 94 52 04 	call	0x8a4	; 0x8a4 <__fp_zero>
 69a:	b1 e0       	ldi	r27, 0x01	; 1
 69c:	08 95       	ret
 69e:	0c 94 52 04 	jmp	0x8a4	; 0x8a4 <__fp_zero>
 6a2:	67 2f       	mov	r22, r23
 6a4:	78 2f       	mov	r23, r24
 6a6:	88 27       	eor	r24, r24
 6a8:	b8 5f       	subi	r27, 0xF8	; 248
 6aa:	39 f0       	breq	.+14     	; 0x6ba <__fixunssfsi+0x4c>
 6ac:	b9 3f       	cpi	r27, 0xF9	; 249
 6ae:	cc f3       	brlt	.-14     	; 0x6a2 <__fixunssfsi+0x34>
 6b0:	86 95       	lsr	r24
 6b2:	77 95       	ror	r23
 6b4:	67 95       	ror	r22
 6b6:	b3 95       	inc	r27
 6b8:	d9 f7       	brne	.-10     	; 0x6b0 <__fixunssfsi+0x42>
 6ba:	3e f4       	brtc	.+14     	; 0x6ca <__fixunssfsi+0x5c>
 6bc:	90 95       	com	r25
 6be:	80 95       	com	r24
 6c0:	70 95       	com	r23
 6c2:	61 95       	neg	r22
 6c4:	7f 4f       	sbci	r23, 0xFF	; 255
 6c6:	8f 4f       	sbci	r24, 0xFF	; 255
 6c8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ca:	08 95       	ret

000006cc <__floatunsisf>:
 6cc:	e8 94       	clt
 6ce:	09 c0       	rjmp	.+18     	; 0x6e2 <__floatsisf+0x12>

000006d0 <__floatsisf>:
 6d0:	97 fb       	bst	r25, 7
 6d2:	3e f4       	brtc	.+14     	; 0x6e2 <__floatsisf+0x12>
 6d4:	90 95       	com	r25
 6d6:	80 95       	com	r24
 6d8:	70 95       	com	r23
 6da:	61 95       	neg	r22
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255
 6de:	8f 4f       	sbci	r24, 0xFF	; 255
 6e0:	9f 4f       	sbci	r25, 0xFF	; 255
 6e2:	99 23       	and	r25, r25
 6e4:	a9 f0       	breq	.+42     	; 0x710 <__floatsisf+0x40>
 6e6:	f9 2f       	mov	r31, r25
 6e8:	96 e9       	ldi	r25, 0x96	; 150
 6ea:	bb 27       	eor	r27, r27
 6ec:	93 95       	inc	r25
 6ee:	f6 95       	lsr	r31
 6f0:	87 95       	ror	r24
 6f2:	77 95       	ror	r23
 6f4:	67 95       	ror	r22
 6f6:	b7 95       	ror	r27
 6f8:	f1 11       	cpse	r31, r1
 6fa:	f8 cf       	rjmp	.-16     	; 0x6ec <__floatsisf+0x1c>
 6fc:	fa f4       	brpl	.+62     	; 0x73c <__floatsisf+0x6c>
 6fe:	bb 0f       	add	r27, r27
 700:	11 f4       	brne	.+4      	; 0x706 <__floatsisf+0x36>
 702:	60 ff       	sbrs	r22, 0
 704:	1b c0       	rjmp	.+54     	; 0x73c <__floatsisf+0x6c>
 706:	6f 5f       	subi	r22, 0xFF	; 255
 708:	7f 4f       	sbci	r23, 0xFF	; 255
 70a:	8f 4f       	sbci	r24, 0xFF	; 255
 70c:	9f 4f       	sbci	r25, 0xFF	; 255
 70e:	16 c0       	rjmp	.+44     	; 0x73c <__floatsisf+0x6c>
 710:	88 23       	and	r24, r24
 712:	11 f0       	breq	.+4      	; 0x718 <__floatsisf+0x48>
 714:	96 e9       	ldi	r25, 0x96	; 150
 716:	11 c0       	rjmp	.+34     	; 0x73a <__floatsisf+0x6a>
 718:	77 23       	and	r23, r23
 71a:	21 f0       	breq	.+8      	; 0x724 <__floatsisf+0x54>
 71c:	9e e8       	ldi	r25, 0x8E	; 142
 71e:	87 2f       	mov	r24, r23
 720:	76 2f       	mov	r23, r22
 722:	05 c0       	rjmp	.+10     	; 0x72e <__floatsisf+0x5e>
 724:	66 23       	and	r22, r22
 726:	71 f0       	breq	.+28     	; 0x744 <__floatsisf+0x74>
 728:	96 e8       	ldi	r25, 0x86	; 134
 72a:	86 2f       	mov	r24, r22
 72c:	70 e0       	ldi	r23, 0x00	; 0
 72e:	60 e0       	ldi	r22, 0x00	; 0
 730:	2a f0       	brmi	.+10     	; 0x73c <__floatsisf+0x6c>
 732:	9a 95       	dec	r25
 734:	66 0f       	add	r22, r22
 736:	77 1f       	adc	r23, r23
 738:	88 1f       	adc	r24, r24
 73a:	da f7       	brpl	.-10     	; 0x732 <__floatsisf+0x62>
 73c:	88 0f       	add	r24, r24
 73e:	96 95       	lsr	r25
 740:	87 95       	ror	r24
 742:	97 f9       	bld	r25, 7
 744:	08 95       	ret

00000746 <__fp_cmp>:
 746:	99 0f       	add	r25, r25
 748:	00 08       	sbc	r0, r0
 74a:	55 0f       	add	r21, r21
 74c:	aa 0b       	sbc	r26, r26
 74e:	e0 e8       	ldi	r30, 0x80	; 128
 750:	fe ef       	ldi	r31, 0xFE	; 254
 752:	16 16       	cp	r1, r22
 754:	17 06       	cpc	r1, r23
 756:	e8 07       	cpc	r30, r24
 758:	f9 07       	cpc	r31, r25
 75a:	c0 f0       	brcs	.+48     	; 0x78c <__fp_cmp+0x46>
 75c:	12 16       	cp	r1, r18
 75e:	13 06       	cpc	r1, r19
 760:	e4 07       	cpc	r30, r20
 762:	f5 07       	cpc	r31, r21
 764:	98 f0       	brcs	.+38     	; 0x78c <__fp_cmp+0x46>
 766:	62 1b       	sub	r22, r18
 768:	73 0b       	sbc	r23, r19
 76a:	84 0b       	sbc	r24, r20
 76c:	95 0b       	sbc	r25, r21
 76e:	39 f4       	brne	.+14     	; 0x77e <__fp_cmp+0x38>
 770:	0a 26       	eor	r0, r26
 772:	61 f0       	breq	.+24     	; 0x78c <__fp_cmp+0x46>
 774:	23 2b       	or	r18, r19
 776:	24 2b       	or	r18, r20
 778:	25 2b       	or	r18, r21
 77a:	21 f4       	brne	.+8      	; 0x784 <__fp_cmp+0x3e>
 77c:	08 95       	ret
 77e:	0a 26       	eor	r0, r26
 780:	09 f4       	brne	.+2      	; 0x784 <__fp_cmp+0x3e>
 782:	a1 40       	sbci	r26, 0x01	; 1
 784:	a6 95       	lsr	r26
 786:	8f ef       	ldi	r24, 0xFF	; 255
 788:	81 1d       	adc	r24, r1
 78a:	81 1d       	adc	r24, r1
 78c:	08 95       	ret

0000078e <__fp_inf>:
 78e:	97 f9       	bld	r25, 7
 790:	9f 67       	ori	r25, 0x7F	; 127
 792:	80 e8       	ldi	r24, 0x80	; 128
 794:	70 e0       	ldi	r23, 0x00	; 0
 796:	60 e0       	ldi	r22, 0x00	; 0
 798:	08 95       	ret

0000079a <__fp_mintl>:
 79a:	88 23       	and	r24, r24
 79c:	71 f4       	brne	.+28     	; 0x7ba <__fp_mintl+0x20>
 79e:	77 23       	and	r23, r23
 7a0:	21 f0       	breq	.+8      	; 0x7aa <__fp_mintl+0x10>
 7a2:	98 50       	subi	r25, 0x08	; 8
 7a4:	87 2b       	or	r24, r23
 7a6:	76 2f       	mov	r23, r22
 7a8:	07 c0       	rjmp	.+14     	; 0x7b8 <__fp_mintl+0x1e>
 7aa:	66 23       	and	r22, r22
 7ac:	11 f4       	brne	.+4      	; 0x7b2 <__fp_mintl+0x18>
 7ae:	99 27       	eor	r25, r25
 7b0:	0d c0       	rjmp	.+26     	; 0x7cc <__fp_mintl+0x32>
 7b2:	90 51       	subi	r25, 0x10	; 16
 7b4:	86 2b       	or	r24, r22
 7b6:	70 e0       	ldi	r23, 0x00	; 0
 7b8:	60 e0       	ldi	r22, 0x00	; 0
 7ba:	2a f0       	brmi	.+10     	; 0x7c6 <__fp_mintl+0x2c>
 7bc:	9a 95       	dec	r25
 7be:	66 0f       	add	r22, r22
 7c0:	77 1f       	adc	r23, r23
 7c2:	88 1f       	adc	r24, r24
 7c4:	da f7       	brpl	.-10     	; 0x7bc <__fp_mintl+0x22>
 7c6:	88 0f       	add	r24, r24
 7c8:	96 95       	lsr	r25
 7ca:	87 95       	ror	r24
 7cc:	97 f9       	bld	r25, 7
 7ce:	08 95       	ret

000007d0 <__fp_mpack>:
 7d0:	9f 3f       	cpi	r25, 0xFF	; 255
 7d2:	31 f0       	breq	.+12     	; 0x7e0 <__fp_mpack_finite+0xc>

000007d4 <__fp_mpack_finite>:
 7d4:	91 50       	subi	r25, 0x01	; 1
 7d6:	20 f4       	brcc	.+8      	; 0x7e0 <__fp_mpack_finite+0xc>
 7d8:	87 95       	ror	r24
 7da:	77 95       	ror	r23
 7dc:	67 95       	ror	r22
 7de:	b7 95       	ror	r27
 7e0:	88 0f       	add	r24, r24
 7e2:	91 1d       	adc	r25, r1
 7e4:	96 95       	lsr	r25
 7e6:	87 95       	ror	r24
 7e8:	97 f9       	bld	r25, 7
 7ea:	08 95       	ret

000007ec <__fp_nan>:
 7ec:	9f ef       	ldi	r25, 0xFF	; 255
 7ee:	80 ec       	ldi	r24, 0xC0	; 192
 7f0:	08 95       	ret

000007f2 <__fp_pscA>:
 7f2:	00 24       	eor	r0, r0
 7f4:	0a 94       	dec	r0
 7f6:	16 16       	cp	r1, r22
 7f8:	17 06       	cpc	r1, r23
 7fa:	18 06       	cpc	r1, r24
 7fc:	09 06       	cpc	r0, r25
 7fe:	08 95       	ret

00000800 <__fp_pscB>:
 800:	00 24       	eor	r0, r0
 802:	0a 94       	dec	r0
 804:	12 16       	cp	r1, r18
 806:	13 06       	cpc	r1, r19
 808:	14 06       	cpc	r1, r20
 80a:	05 06       	cpc	r0, r21
 80c:	08 95       	ret

0000080e <__fp_round>:
 80e:	09 2e       	mov	r0, r25
 810:	03 94       	inc	r0
 812:	00 0c       	add	r0, r0
 814:	11 f4       	brne	.+4      	; 0x81a <__fp_round+0xc>
 816:	88 23       	and	r24, r24
 818:	52 f0       	brmi	.+20     	; 0x82e <__fp_round+0x20>
 81a:	bb 0f       	add	r27, r27
 81c:	40 f4       	brcc	.+16     	; 0x82e <__fp_round+0x20>
 81e:	bf 2b       	or	r27, r31
 820:	11 f4       	brne	.+4      	; 0x826 <__fp_round+0x18>
 822:	60 ff       	sbrs	r22, 0
 824:	04 c0       	rjmp	.+8      	; 0x82e <__fp_round+0x20>
 826:	6f 5f       	subi	r22, 0xFF	; 255
 828:	7f 4f       	sbci	r23, 0xFF	; 255
 82a:	8f 4f       	sbci	r24, 0xFF	; 255
 82c:	9f 4f       	sbci	r25, 0xFF	; 255
 82e:	08 95       	ret

00000830 <__fp_split3>:
 830:	57 fd       	sbrc	r21, 7
 832:	90 58       	subi	r25, 0x80	; 128
 834:	44 0f       	add	r20, r20
 836:	55 1f       	adc	r21, r21
 838:	59 f0       	breq	.+22     	; 0x850 <__fp_splitA+0x10>
 83a:	5f 3f       	cpi	r21, 0xFF	; 255
 83c:	71 f0       	breq	.+28     	; 0x85a <__fp_splitA+0x1a>
 83e:	47 95       	ror	r20

00000840 <__fp_splitA>:
 840:	88 0f       	add	r24, r24
 842:	97 fb       	bst	r25, 7
 844:	99 1f       	adc	r25, r25
 846:	61 f0       	breq	.+24     	; 0x860 <__stack+0x1>
 848:	9f 3f       	cpi	r25, 0xFF	; 255
 84a:	79 f0       	breq	.+30     	; 0x86a <__stack+0xb>
 84c:	87 95       	ror	r24
 84e:	08 95       	ret
 850:	12 16       	cp	r1, r18
 852:	13 06       	cpc	r1, r19
 854:	14 06       	cpc	r1, r20
 856:	55 1f       	adc	r21, r21
 858:	f2 cf       	rjmp	.-28     	; 0x83e <__fp_split3+0xe>
 85a:	46 95       	lsr	r20
 85c:	f1 df       	rcall	.-30     	; 0x840 <__fp_splitA>
 85e:	08 c0       	rjmp	.+16     	; 0x870 <__stack+0x11>
 860:	16 16       	cp	r1, r22
 862:	17 06       	cpc	r1, r23
 864:	18 06       	cpc	r1, r24
 866:	99 1f       	adc	r25, r25
 868:	f1 cf       	rjmp	.-30     	; 0x84c <__fp_splitA+0xc>
 86a:	86 95       	lsr	r24
 86c:	71 05       	cpc	r23, r1
 86e:	61 05       	cpc	r22, r1
 870:	08 94       	sec
 872:	08 95       	ret

00000874 <__fp_trunc>:
 874:	0e 94 20 04 	call	0x840	; 0x840 <__fp_splitA>
 878:	a0 f0       	brcs	.+40     	; 0x8a2 <__fp_trunc+0x2e>
 87a:	be e7       	ldi	r27, 0x7E	; 126
 87c:	b9 17       	cp	r27, r25
 87e:	88 f4       	brcc	.+34     	; 0x8a2 <__fp_trunc+0x2e>
 880:	bb 27       	eor	r27, r27
 882:	9f 38       	cpi	r25, 0x8F	; 143
 884:	60 f4       	brcc	.+24     	; 0x89e <__fp_trunc+0x2a>
 886:	16 16       	cp	r1, r22
 888:	b1 1d       	adc	r27, r1
 88a:	67 2f       	mov	r22, r23
 88c:	78 2f       	mov	r23, r24
 88e:	88 27       	eor	r24, r24
 890:	98 5f       	subi	r25, 0xF8	; 248
 892:	f7 cf       	rjmp	.-18     	; 0x882 <__fp_trunc+0xe>
 894:	86 95       	lsr	r24
 896:	77 95       	ror	r23
 898:	67 95       	ror	r22
 89a:	b1 1d       	adc	r27, r1
 89c:	93 95       	inc	r25
 89e:	96 39       	cpi	r25, 0x96	; 150
 8a0:	c8 f3       	brcs	.-14     	; 0x894 <__fp_trunc+0x20>
 8a2:	08 95       	ret

000008a4 <__fp_zero>:
 8a4:	e8 94       	clt

000008a6 <__fp_szero>:
 8a6:	bb 27       	eor	r27, r27
 8a8:	66 27       	eor	r22, r22
 8aa:	77 27       	eor	r23, r23
 8ac:	cb 01       	movw	r24, r22
 8ae:	97 f9       	bld	r25, 7
 8b0:	08 95       	ret

000008b2 <__gesf2>:
 8b2:	0e 94 a3 03 	call	0x746	; 0x746 <__fp_cmp>
 8b6:	08 f4       	brcc	.+2      	; 0x8ba <__gesf2+0x8>
 8b8:	8f ef       	ldi	r24, 0xFF	; 255
 8ba:	08 95       	ret

000008bc <_exit>:
 8bc:	f8 94       	cli

000008be <__stop_program>:
 8be:	ff cf       	rjmp	.-2      	; 0x8be <__stop_program>
