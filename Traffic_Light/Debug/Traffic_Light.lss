
Traffic_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a2c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000a80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000a80  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ab0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  00000aec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d83  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000869  00000000  00000000  0000197f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000094b  00000000  00000000  000021e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001ac  00000000  00000000  00002b34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000460  00000000  00000000  00002ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a9d  00000000  00000000  00003140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00003bdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_1>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 bd 02 	call	0x57a	; 0x57a <main>
  64:	0c 94 14 05 	jmp	0xa28	; 0xa28 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_1>:
void APP_START(void)
{
	
}
IFUN(INT0_VECTOR)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
	
  76:	0f 90       	pop	r0
  78:	0f be       	out	0x3f, r0	; 63
  7a:	0f 90       	pop	r0
  7c:	1f 90       	pop	r1
  7e:	18 95       	reti

00000080 <DIO_INITIALIZE>:
#include "dio.h"

//INITIALIZATION
void DIO_INITIALIZE(uint8_t pinNumber, uint8_t portNumber, uint8_t direction)
{
	switch (portNumber)
  80:	62 34       	cpi	r22, 0x42	; 66
  82:	59 f1       	breq	.+86     	; 0xda <DIO_INITIALIZE+0x5a>
  84:	18 f4       	brcc	.+6      	; 0x8c <DIO_INITIALIZE+0xc>
  86:	61 34       	cpi	r22, 0x41	; 65
  88:	41 f0       	breq	.+16     	; 0x9a <DIO_INITIALIZE+0x1a>
  8a:	08 95       	ret
  8c:	63 34       	cpi	r22, 0x43	; 67
  8e:	09 f4       	brne	.+2      	; 0x92 <DIO_INITIALIZE+0x12>
  90:	44 c0       	rjmp	.+136    	; 0x11a <DIO_INITIALIZE+0x9a>
  92:	64 34       	cpi	r22, 0x44	; 68
  94:	09 f4       	brne	.+2      	; 0x98 <DIO_INITIALIZE+0x18>
  96:	60 c0       	rjmp	.+192    	; 0x158 <DIO_INITIALIZE+0xd8>
  98:	08 95       	ret
	{
		case PORT_A:
			if (direction == IN)
  9a:	41 11       	cpse	r20, r1
  9c:	0e c0       	rjmp	.+28     	; 0xba <DIO_INITIALIZE+0x3a>
			{
				CLEAR(DDRA, pinNumber);
  9e:	4a b3       	in	r20, 0x1a	; 26
  a0:	21 e0       	ldi	r18, 0x01	; 1
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	b9 01       	movw	r22, r18
  a6:	02 c0       	rjmp	.+4      	; 0xac <DIO_INITIALIZE+0x2c>
  a8:	66 0f       	add	r22, r22
  aa:	77 1f       	adc	r23, r23
  ac:	8a 95       	dec	r24
  ae:	e2 f7       	brpl	.-8      	; 0xa8 <DIO_INITIALIZE+0x28>
  b0:	cb 01       	movw	r24, r22
  b2:	80 95       	com	r24
  b4:	84 23       	and	r24, r20
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	08 95       	ret
			}
			else if (direction == OUT)
  ba:	41 30       	cpi	r20, 0x01	; 1
  bc:	09 f0       	breq	.+2      	; 0xc0 <DIO_INITIALIZE+0x40>
  be:	6a c0       	rjmp	.+212    	; 0x194 <DIO_INITIALIZE+0x114>
			{
				SET(DDRA, pinNumber);
  c0:	4a b3       	in	r20, 0x1a	; 26
  c2:	21 e0       	ldi	r18, 0x01	; 1
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	b9 01       	movw	r22, r18
  c8:	02 c0       	rjmp	.+4      	; 0xce <DIO_INITIALIZE+0x4e>
  ca:	66 0f       	add	r22, r22
  cc:	77 1f       	adc	r23, r23
  ce:	8a 95       	dec	r24
  d0:	e2 f7       	brpl	.-8      	; 0xca <DIO_INITIALIZE+0x4a>
  d2:	cb 01       	movw	r24, r22
  d4:	84 2b       	or	r24, r20
  d6:	8a bb       	out	0x1a, r24	; 26
  d8:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_B:
			if (direction == IN)
  da:	41 11       	cpse	r20, r1
  dc:	0e c0       	rjmp	.+28     	; 0xfa <DIO_INITIALIZE+0x7a>
			{
				CLEAR(DDRB, pinNumber);
  de:	47 b3       	in	r20, 0x17	; 23
  e0:	21 e0       	ldi	r18, 0x01	; 1
  e2:	30 e0       	ldi	r19, 0x00	; 0
  e4:	b9 01       	movw	r22, r18
  e6:	02 c0       	rjmp	.+4      	; 0xec <DIO_INITIALIZE+0x6c>
  e8:	66 0f       	add	r22, r22
  ea:	77 1f       	adc	r23, r23
  ec:	8a 95       	dec	r24
  ee:	e2 f7       	brpl	.-8      	; 0xe8 <DIO_INITIALIZE+0x68>
  f0:	cb 01       	movw	r24, r22
  f2:	80 95       	com	r24
  f4:	84 23       	and	r24, r20
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	08 95       	ret
			}
			else if (direction == OUT)
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	09 f0       	breq	.+2      	; 0x100 <DIO_INITIALIZE+0x80>
  fe:	4a c0       	rjmp	.+148    	; 0x194 <DIO_INITIALIZE+0x114>
			{
				SET(DDRB, pinNumber);
 100:	47 b3       	in	r20, 0x17	; 23
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	b9 01       	movw	r22, r18
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_INITIALIZE+0x8e>
 10a:	66 0f       	add	r22, r22
 10c:	77 1f       	adc	r23, r23
 10e:	8a 95       	dec	r24
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_INITIALIZE+0x8a>
 112:	cb 01       	movw	r24, r22
 114:	84 2b       	or	r24, r20
 116:	87 bb       	out	0x17, r24	; 23
 118:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_C:
			if (direction == IN)
 11a:	41 11       	cpse	r20, r1
 11c:	0e c0       	rjmp	.+28     	; 0x13a <DIO_INITIALIZE+0xba>
			{
				CLEAR(DDRC, pinNumber);
 11e:	44 b3       	in	r20, 0x14	; 20
 120:	21 e0       	ldi	r18, 0x01	; 1
 122:	30 e0       	ldi	r19, 0x00	; 0
 124:	b9 01       	movw	r22, r18
 126:	02 c0       	rjmp	.+4      	; 0x12c <DIO_INITIALIZE+0xac>
 128:	66 0f       	add	r22, r22
 12a:	77 1f       	adc	r23, r23
 12c:	8a 95       	dec	r24
 12e:	e2 f7       	brpl	.-8      	; 0x128 <DIO_INITIALIZE+0xa8>
 130:	cb 01       	movw	r24, r22
 132:	80 95       	com	r24
 134:	84 23       	and	r24, r20
 136:	84 bb       	out	0x14, r24	; 20
 138:	08 95       	ret
			}
			else if (direction == OUT)
 13a:	41 30       	cpi	r20, 0x01	; 1
 13c:	59 f5       	brne	.+86     	; 0x194 <DIO_INITIALIZE+0x114>
			{
				SET(DDRC, pinNumber);
 13e:	44 b3       	in	r20, 0x14	; 20
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	b9 01       	movw	r22, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_INITIALIZE+0xcc>
 148:	66 0f       	add	r22, r22
 14a:	77 1f       	adc	r23, r23
 14c:	8a 95       	dec	r24
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_INITIALIZE+0xc8>
 150:	cb 01       	movw	r24, r22
 152:	84 2b       	or	r24, r20
 154:	84 bb       	out	0x14, r24	; 20
 156:	08 95       	ret
			{
				//Error handling
			}
			break;
			case PORT_D:
			if (direction == IN)
 158:	41 11       	cpse	r20, r1
 15a:	0e c0       	rjmp	.+28     	; 0x178 <DIO_INITIALIZE+0xf8>
			{
				CLEAR(DDRD, pinNumber);
 15c:	41 b3       	in	r20, 0x11	; 17
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	b9 01       	movw	r22, r18
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_INITIALIZE+0xea>
 166:	66 0f       	add	r22, r22
 168:	77 1f       	adc	r23, r23
 16a:	8a 95       	dec	r24
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_INITIALIZE+0xe6>
 16e:	cb 01       	movw	r24, r22
 170:	80 95       	com	r24
 172:	84 23       	and	r24, r20
 174:	81 bb       	out	0x11, r24	; 17
 176:	08 95       	ret
			}
			else if (direction == OUT)
 178:	41 30       	cpi	r20, 0x01	; 1
 17a:	61 f4       	brne	.+24     	; 0x194 <DIO_INITIALIZE+0x114>
			{
				SET(DDRD, pinNumber);
 17c:	41 b3       	in	r20, 0x11	; 17
 17e:	21 e0       	ldi	r18, 0x01	; 1
 180:	30 e0       	ldi	r19, 0x00	; 0
 182:	b9 01       	movw	r22, r18
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_INITIALIZE+0x10a>
 186:	66 0f       	add	r22, r22
 188:	77 1f       	adc	r23, r23
 18a:	8a 95       	dec	r24
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_INITIALIZE+0x106>
 18e:	cb 01       	movw	r24, r22
 190:	84 2b       	or	r24, r20
 192:	81 bb       	out	0x11, r24	; 17
 194:	08 95       	ret

00000196 <DIO_WRITE>:
}

//CHANGE DIO STATE
void DIO_WRITE(uint8_t pinNumber, uint8_t portNumber, uint8_t value)
{
	switch (portNumber)
 196:	62 34       	cpi	r22, 0x42	; 66
 198:	59 f1       	breq	.+86     	; 0x1f0 <DIO_WRITE+0x5a>
 19a:	18 f4       	brcc	.+6      	; 0x1a2 <DIO_WRITE+0xc>
 19c:	61 34       	cpi	r22, 0x41	; 65
 19e:	41 f0       	breq	.+16     	; 0x1b0 <DIO_WRITE+0x1a>
 1a0:	08 95       	ret
 1a2:	63 34       	cpi	r22, 0x43	; 67
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <DIO_WRITE+0x12>
 1a6:	44 c0       	rjmp	.+136    	; 0x230 <DIO_WRITE+0x9a>
 1a8:	64 34       	cpi	r22, 0x44	; 68
 1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_WRITE+0x18>
 1ac:	60 c0       	rjmp	.+192    	; 0x26e <DIO_WRITE+0xd8>
 1ae:	08 95       	ret
	{
		case PORT_A:
		if(value == LOW)
 1b0:	41 11       	cpse	r20, r1
 1b2:	0e c0       	rjmp	.+28     	; 0x1d0 <DIO_WRITE+0x3a>
		{
			CLEAR(PORTA, pinNumber);
 1b4:	4b b3       	in	r20, 0x1b	; 27
 1b6:	21 e0       	ldi	r18, 0x01	; 1
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	b9 01       	movw	r22, r18
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_WRITE+0x2c>
 1be:	66 0f       	add	r22, r22
 1c0:	77 1f       	adc	r23, r23
 1c2:	8a 95       	dec	r24
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_WRITE+0x28>
 1c6:	cb 01       	movw	r24, r22
 1c8:	80 95       	com	r24
 1ca:	84 23       	and	r24, r20
 1cc:	8b bb       	out	0x1b, r24	; 27
 1ce:	08 95       	ret
		}
		else if (value == HIGH)
 1d0:	41 30       	cpi	r20, 0x01	; 1
 1d2:	09 f0       	breq	.+2      	; 0x1d6 <DIO_WRITE+0x40>
 1d4:	6a c0       	rjmp	.+212    	; 0x2aa <DIO_WRITE+0x114>
		{
			SET(PORTA, pinNumber);
 1d6:	4b b3       	in	r20, 0x1b	; 27
 1d8:	21 e0       	ldi	r18, 0x01	; 1
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	b9 01       	movw	r22, r18
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_WRITE+0x4e>
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	8a 95       	dec	r24
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_WRITE+0x4a>
 1e8:	cb 01       	movw	r24, r22
 1ea:	84 2b       	or	r24, r20
 1ec:	8b bb       	out	0x1b, r24	; 27
 1ee:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_B:
		if(value == LOW)
 1f0:	41 11       	cpse	r20, r1
 1f2:	0e c0       	rjmp	.+28     	; 0x210 <DIO_WRITE+0x7a>
		{
			CLEAR(PORTB, pinNumber);
 1f4:	48 b3       	in	r20, 0x18	; 24
 1f6:	21 e0       	ldi	r18, 0x01	; 1
 1f8:	30 e0       	ldi	r19, 0x00	; 0
 1fa:	b9 01       	movw	r22, r18
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_WRITE+0x6c>
 1fe:	66 0f       	add	r22, r22
 200:	77 1f       	adc	r23, r23
 202:	8a 95       	dec	r24
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_WRITE+0x68>
 206:	cb 01       	movw	r24, r22
 208:	80 95       	com	r24
 20a:	84 23       	and	r24, r20
 20c:	88 bb       	out	0x18, r24	; 24
 20e:	08 95       	ret
		}
		else if (value == HIGH)
 210:	41 30       	cpi	r20, 0x01	; 1
 212:	09 f0       	breq	.+2      	; 0x216 <DIO_WRITE+0x80>
 214:	4a c0       	rjmp	.+148    	; 0x2aa <DIO_WRITE+0x114>
		{
			SET(PORTB, pinNumber);
 216:	48 b3       	in	r20, 0x18	; 24
 218:	21 e0       	ldi	r18, 0x01	; 1
 21a:	30 e0       	ldi	r19, 0x00	; 0
 21c:	b9 01       	movw	r22, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_WRITE+0x8e>
 220:	66 0f       	add	r22, r22
 222:	77 1f       	adc	r23, r23
 224:	8a 95       	dec	r24
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_WRITE+0x8a>
 228:	cb 01       	movw	r24, r22
 22a:	84 2b       	or	r24, r20
 22c:	88 bb       	out	0x18, r24	; 24
 22e:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_C:
		if(value == LOW)
 230:	41 11       	cpse	r20, r1
 232:	0e c0       	rjmp	.+28     	; 0x250 <DIO_WRITE+0xba>
		{
			CLEAR(PORTC, pinNumber);
 234:	45 b3       	in	r20, 0x15	; 21
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	30 e0       	ldi	r19, 0x00	; 0
 23a:	b9 01       	movw	r22, r18
 23c:	02 c0       	rjmp	.+4      	; 0x242 <DIO_WRITE+0xac>
 23e:	66 0f       	add	r22, r22
 240:	77 1f       	adc	r23, r23
 242:	8a 95       	dec	r24
 244:	e2 f7       	brpl	.-8      	; 0x23e <DIO_WRITE+0xa8>
 246:	cb 01       	movw	r24, r22
 248:	80 95       	com	r24
 24a:	84 23       	and	r24, r20
 24c:	85 bb       	out	0x15, r24	; 21
 24e:	08 95       	ret
		}
		else if (value == HIGH)
 250:	41 30       	cpi	r20, 0x01	; 1
 252:	59 f5       	brne	.+86     	; 0x2aa <DIO_WRITE+0x114>
		{
			SET(PORTC, pinNumber);
 254:	45 b3       	in	r20, 0x15	; 21
 256:	21 e0       	ldi	r18, 0x01	; 1
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	b9 01       	movw	r22, r18
 25c:	02 c0       	rjmp	.+4      	; 0x262 <DIO_WRITE+0xcc>
 25e:	66 0f       	add	r22, r22
 260:	77 1f       	adc	r23, r23
 262:	8a 95       	dec	r24
 264:	e2 f7       	brpl	.-8      	; 0x25e <DIO_WRITE+0xc8>
 266:	cb 01       	movw	r24, r22
 268:	84 2b       	or	r24, r20
 26a:	85 bb       	out	0x15, r24	; 21
 26c:	08 95       	ret
		{
			// Error handling
		}
		break;
		case PORT_D:
		if(value == LOW)
 26e:	41 11       	cpse	r20, r1
 270:	0e c0       	rjmp	.+28     	; 0x28e <DIO_WRITE+0xf8>
		{
			CLEAR(PORTD, pinNumber);
 272:	42 b3       	in	r20, 0x12	; 18
 274:	21 e0       	ldi	r18, 0x01	; 1
 276:	30 e0       	ldi	r19, 0x00	; 0
 278:	b9 01       	movw	r22, r18
 27a:	02 c0       	rjmp	.+4      	; 0x280 <DIO_WRITE+0xea>
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	8a 95       	dec	r24
 282:	e2 f7       	brpl	.-8      	; 0x27c <DIO_WRITE+0xe6>
 284:	cb 01       	movw	r24, r22
 286:	80 95       	com	r24
 288:	84 23       	and	r24, r20
 28a:	82 bb       	out	0x12, r24	; 18
 28c:	08 95       	ret
		}
		else if (value == HIGH)
 28e:	41 30       	cpi	r20, 0x01	; 1
 290:	61 f4       	brne	.+24     	; 0x2aa <DIO_WRITE+0x114>
		{
			SET(PORTD, pinNumber);
 292:	42 b3       	in	r20, 0x12	; 18
 294:	21 e0       	ldi	r18, 0x01	; 1
 296:	30 e0       	ldi	r19, 0x00	; 0
 298:	b9 01       	movw	r22, r18
 29a:	02 c0       	rjmp	.+4      	; 0x2a0 <DIO_WRITE+0x10a>
 29c:	66 0f       	add	r22, r22
 29e:	77 1f       	adc	r23, r23
 2a0:	8a 95       	dec	r24
 2a2:	e2 f7       	brpl	.-8      	; 0x29c <DIO_WRITE+0x106>
 2a4:	cb 01       	movw	r24, r22
 2a6:	84 2b       	or	r24, r20
 2a8:	82 bb       	out	0x12, r24	; 18
 2aa:	08 95       	ret

000002ac <DIO_TOGGLE>:
}

//TOGGLE DIO STATE
void DIO_TOGGLE(uint8_t pinNumber, uint8_t portNumber)
{
	switch (portNumber)
 2ac:	62 34       	cpi	r22, 0x42	; 66
 2ae:	b1 f0       	breq	.+44     	; 0x2dc <DIO_TOGGLE+0x30>
 2b0:	18 f4       	brcc	.+6      	; 0x2b8 <DIO_TOGGLE+0xc>
 2b2:	61 34       	cpi	r22, 0x41	; 65
 2b4:	31 f0       	breq	.+12     	; 0x2c2 <DIO_TOGGLE+0x16>
 2b6:	08 95       	ret
 2b8:	63 34       	cpi	r22, 0x43	; 67
 2ba:	e9 f0       	breq	.+58     	; 0x2f6 <DIO_TOGGLE+0x4a>
 2bc:	64 34       	cpi	r22, 0x44	; 68
 2be:	41 f1       	breq	.+80     	; 0x310 <DIO_TOGGLE+0x64>
 2c0:	08 95       	ret
	{
		case PORT_A:
		TOGGEL(PORTA, pinNumber);
 2c2:	4b b3       	in	r20, 0x1b	; 27
 2c4:	21 e0       	ldi	r18, 0x01	; 1
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	b9 01       	movw	r22, r18
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_TOGGLE+0x24>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	8a 95       	dec	r24
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_TOGGLE+0x20>
 2d4:	cb 01       	movw	r24, r22
 2d6:	84 27       	eor	r24, r20
 2d8:	8b bb       	out	0x1b, r24	; 27
		break;
 2da:	08 95       	ret
		
		case PORT_B:
		TOGGEL(PORTB, pinNumber);
 2dc:	48 b3       	in	r20, 0x18	; 24
 2de:	21 e0       	ldi	r18, 0x01	; 1
 2e0:	30 e0       	ldi	r19, 0x00	; 0
 2e2:	b9 01       	movw	r22, r18
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <DIO_TOGGLE+0x3e>
 2e6:	66 0f       	add	r22, r22
 2e8:	77 1f       	adc	r23, r23
 2ea:	8a 95       	dec	r24
 2ec:	e2 f7       	brpl	.-8      	; 0x2e6 <DIO_TOGGLE+0x3a>
 2ee:	cb 01       	movw	r24, r22
 2f0:	84 27       	eor	r24, r20
 2f2:	88 bb       	out	0x18, r24	; 24
		break;
 2f4:	08 95       	ret
		
		case PORT_C:
		TOGGEL(PORTC, pinNumber);
 2f6:	45 b3       	in	r20, 0x15	; 21
 2f8:	21 e0       	ldi	r18, 0x01	; 1
 2fa:	30 e0       	ldi	r19, 0x00	; 0
 2fc:	b9 01       	movw	r22, r18
 2fe:	02 c0       	rjmp	.+4      	; 0x304 <DIO_TOGGLE+0x58>
 300:	66 0f       	add	r22, r22
 302:	77 1f       	adc	r23, r23
 304:	8a 95       	dec	r24
 306:	e2 f7       	brpl	.-8      	; 0x300 <DIO_TOGGLE+0x54>
 308:	cb 01       	movw	r24, r22
 30a:	84 27       	eor	r24, r20
 30c:	85 bb       	out	0x15, r24	; 21
		break;
 30e:	08 95       	ret
		
		case PORT_D:
		TOGGEL(PORTD, pinNumber);
 310:	42 b3       	in	r20, 0x12	; 18
 312:	21 e0       	ldi	r18, 0x01	; 1
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	b9 01       	movw	r22, r18
 318:	02 c0       	rjmp	.+4      	; 0x31e <DIO_TOGGLE+0x72>
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	8a 95       	dec	r24
 320:	e2 f7       	brpl	.-8      	; 0x31a <DIO_TOGGLE+0x6e>
 322:	cb 01       	movw	r24, r22
 324:	84 27       	eor	r24, r20
 326:	82 bb       	out	0x12, r24	; 18
 328:	08 95       	ret

0000032a <DIO_READ>:
}

//GET DIO STATE
uint8_t DIO_READ(uint8_t pinNumber, uint8_t portNumber, uint8_t* value)
{
	switch (portNumber)
 32a:	62 34       	cpi	r22, 0x42	; 66
 32c:	09 f1       	breq	.+66     	; 0x370 <DIO_READ+0x46>
 32e:	18 f4       	brcc	.+6      	; 0x336 <DIO_READ+0xc>
 330:	61 34       	cpi	r22, 0x41	; 65
 332:	39 f0       	breq	.+14     	; 0x342 <DIO_READ+0x18>
 334:	61 c0       	rjmp	.+194    	; 0x3f8 <DIO_READ+0xce>
 336:	63 34       	cpi	r22, 0x43	; 67
 338:	91 f1       	breq	.+100    	; 0x39e <DIO_READ+0x74>
 33a:	64 34       	cpi	r22, 0x44	; 68
 33c:	09 f4       	brne	.+2      	; 0x340 <DIO_READ+0x16>
 33e:	46 c0       	rjmp	.+140    	; 0x3cc <DIO_READ+0xa2>
 340:	5b c0       	rjmp	.+182    	; 0x3f8 <DIO_READ+0xce>
	{
		case PORT_A:
			*value = GET(PINA, pinNumber);
 342:	99 b3       	in	r25, 0x19	; 25
 344:	21 e0       	ldi	r18, 0x01	; 1
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	b9 01       	movw	r22, r18
 34a:	08 2e       	mov	r0, r24
 34c:	02 c0       	rjmp	.+4      	; 0x352 <DIO_READ+0x28>
 34e:	66 0f       	add	r22, r22
 350:	77 1f       	adc	r23, r23
 352:	0a 94       	dec	r0
 354:	e2 f7       	brpl	.-8      	; 0x34e <DIO_READ+0x24>
 356:	29 2f       	mov	r18, r25
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	26 23       	and	r18, r22
 35c:	37 23       	and	r19, r23
 35e:	b9 01       	movw	r22, r18
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_READ+0x3c>
 362:	75 95       	asr	r23
 364:	67 95       	ror	r22
 366:	8a 95       	dec	r24
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_READ+0x38>
 36a:	fa 01       	movw	r30, r20
 36c:	60 83       	st	Z, r22
		break;
 36e:	44 c0       	rjmp	.+136    	; 0x3f8 <DIO_READ+0xce>
		case PORT_B:
			*value = GET(PINB, pinNumber);
 370:	96 b3       	in	r25, 0x16	; 22
 372:	21 e0       	ldi	r18, 0x01	; 1
 374:	30 e0       	ldi	r19, 0x00	; 0
 376:	b9 01       	movw	r22, r18
 378:	08 2e       	mov	r0, r24
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_READ+0x56>
 37c:	66 0f       	add	r22, r22
 37e:	77 1f       	adc	r23, r23
 380:	0a 94       	dec	r0
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_READ+0x52>
 384:	29 2f       	mov	r18, r25
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	26 23       	and	r18, r22
 38a:	37 23       	and	r19, r23
 38c:	b9 01       	movw	r22, r18
 38e:	02 c0       	rjmp	.+4      	; 0x394 <DIO_READ+0x6a>
 390:	75 95       	asr	r23
 392:	67 95       	ror	r22
 394:	8a 95       	dec	r24
 396:	e2 f7       	brpl	.-8      	; 0x390 <DIO_READ+0x66>
 398:	fa 01       	movw	r30, r20
 39a:	60 83       	st	Z, r22
		break;
 39c:	2d c0       	rjmp	.+90     	; 0x3f8 <DIO_READ+0xce>
		case PORT_C:
			*value = GET(PINC, pinNumber);
 39e:	93 b3       	in	r25, 0x13	; 19
 3a0:	21 e0       	ldi	r18, 0x01	; 1
 3a2:	30 e0       	ldi	r19, 0x00	; 0
 3a4:	b9 01       	movw	r22, r18
 3a6:	08 2e       	mov	r0, r24
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <DIO_READ+0x84>
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	0a 94       	dec	r0
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <DIO_READ+0x80>
 3b2:	29 2f       	mov	r18, r25
 3b4:	30 e0       	ldi	r19, 0x00	; 0
 3b6:	26 23       	and	r18, r22
 3b8:	37 23       	and	r19, r23
 3ba:	b9 01       	movw	r22, r18
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_READ+0x98>
 3be:	75 95       	asr	r23
 3c0:	67 95       	ror	r22
 3c2:	8a 95       	dec	r24
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_READ+0x94>
 3c6:	fa 01       	movw	r30, r20
 3c8:	60 83       	st	Z, r22
		break;
 3ca:	16 c0       	rjmp	.+44     	; 0x3f8 <DIO_READ+0xce>
		case PORT_D:
			*value = GET(PIND, pinNumber);
 3cc:	90 b3       	in	r25, 0x10	; 16
 3ce:	21 e0       	ldi	r18, 0x01	; 1
 3d0:	30 e0       	ldi	r19, 0x00	; 0
 3d2:	b9 01       	movw	r22, r18
 3d4:	08 2e       	mov	r0, r24
 3d6:	02 c0       	rjmp	.+4      	; 0x3dc <DIO_READ+0xb2>
 3d8:	66 0f       	add	r22, r22
 3da:	77 1f       	adc	r23, r23
 3dc:	0a 94       	dec	r0
 3de:	e2 f7       	brpl	.-8      	; 0x3d8 <DIO_READ+0xae>
 3e0:	29 2f       	mov	r18, r25
 3e2:	30 e0       	ldi	r19, 0x00	; 0
 3e4:	26 23       	and	r18, r22
 3e6:	37 23       	and	r19, r23
 3e8:	b9 01       	movw	r22, r18
 3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <DIO_READ+0xc6>
 3ec:	75 95       	asr	r23
 3ee:	67 95       	ror	r22
 3f0:	8a 95       	dec	r24
 3f2:	e2 f7       	brpl	.-8      	; 0x3ec <DIO_READ+0xc2>
 3f4:	fa 01       	movw	r30, r20
 3f6:	60 83       	st	Z, r22
		break;
	}
	return *value;
 3f8:	fa 01       	movw	r30, r20
 3fa:	80 81       	ld	r24, Z
 3fc:	08 95       	ret

000003fe <Timer_INITIALIZE>:
#include <math.h>

//INTIALIZATION
void Timer_INITIALIZE(void)
{
	COUNTER=0x00;
 3fe:	13 be       	out	0x33, r1	; 51
 400:	08 95       	ret

00000402 <Timer_ON>:
}
//TIMER DELAY
void Timer_ON(uint32_t TIME)
{
 402:	8f 92       	push	r8
 404:	9f 92       	push	r9
 406:	af 92       	push	r10
 408:	bf 92       	push	r11
 40a:	cf 92       	push	r12
 40c:	df 92       	push	r13
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
	
	TT = 256.0/1000.0; 
	MAX = TT*(2*2*2*2*2*2*2*2);	
	
	//GET To & NO. OF COUNTS
	if (MAX == TIME)
 412:	bc 01       	movw	r22, r24
 414:	80 e0       	ldi	r24, 0x00	; 0
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	0e 94 1c 04 	call	0x838	; 0x838 <__floatunsisf>
 41c:	6b 01       	movw	r12, r22
 41e:	7c 01       	movw	r14, r24
 420:	2f e6       	ldi	r18, 0x6F	; 111
 422:	32 e1       	ldi	r19, 0x12	; 18
 424:	43 e8       	ldi	r20, 0x83	; 131
 426:	52 e4       	ldi	r21, 0x42	; 66
 428:	0e 94 76 03 	call	0x6ec	; 0x6ec <__cmpsf2>
 42c:	88 23       	and	r24, r24
 42e:	09 f4       	brne	.+2      	; 0x432 <Timer_ON+0x30>
 430:	42 c0       	rjmp	.+132    	; 0x4b6 <Timer_ON+0xb4>
	{
		To = 0;
		NO_FLAGS = 1;
	}
	else if (MAX < TIME)
 432:	2f e6       	ldi	r18, 0x6F	; 111
 434:	32 e1       	ldi	r19, 0x12	; 18
 436:	43 e8       	ldi	r20, 0x83	; 131
 438:	52 e4       	ldi	r21, 0x42	; 66
 43a:	c7 01       	movw	r24, r14
 43c:	b6 01       	movw	r22, r12
 43e:	0e 94 0f 05 	call	0xa1e	; 0xa1e <__gesf2>
 442:	18 16       	cp	r1, r24
 444:	0c f5       	brge	.+66     	; 0x488 <Timer_ON+0x86>
	{
		NO_FLAGS = ceil(TIME/MAX);
 446:	2f e6       	ldi	r18, 0x6F	; 111
 448:	32 e1       	ldi	r19, 0x12	; 18
 44a:	43 e8       	ldi	r20, 0x83	; 131
 44c:	52 e4       	ldi	r21, 0x42	; 66
 44e:	c7 01       	movw	r24, r14
 450:	b6 01       	movw	r22, r12
 452:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divsf3>
 456:	0e 94 5f 03 	call	0x6be	; 0x6be <ceil>
 45a:	4b 01       	movw	r8, r22
 45c:	5c 01       	movw	r10, r24
		To = (1 << 8) - (TIME/TT)/NO_FLAGS;
 45e:	2f e6       	ldi	r18, 0x6F	; 111
 460:	32 e1       	ldi	r19, 0x12	; 18
 462:	43 e8       	ldi	r20, 0x83	; 131
 464:	5e e3       	ldi	r21, 0x3E	; 62
 466:	c7 01       	movw	r24, r14
 468:	b6 01       	movw	r22, r12
 46a:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divsf3>
 46e:	a5 01       	movw	r20, r10
 470:	94 01       	movw	r18, r8
 472:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divsf3>
 476:	9b 01       	movw	r18, r22
 478:	ac 01       	movw	r20, r24
 47a:	60 e0       	ldi	r22, 0x00	; 0
 47c:	70 e0       	ldi	r23, 0x00	; 0
 47e:	80 e8       	ldi	r24, 0x80	; 128
 480:	93 e4       	ldi	r25, 0x43	; 67
 482:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__subsf3>
 486:	22 c0       	rjmp	.+68     	; 0x4cc <Timer_ON+0xca>
	}
	else
	{
		To = (MAX - TIME)/TT;
 488:	a7 01       	movw	r20, r14
 48a:	96 01       	movw	r18, r12
 48c:	6f e6       	ldi	r22, 0x6F	; 111
 48e:	72 e1       	ldi	r23, 0x12	; 18
 490:	83 e8       	ldi	r24, 0x83	; 131
 492:	92 e4       	ldi	r25, 0x42	; 66
 494:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <__subsf3>
 498:	2f e6       	ldi	r18, 0x6F	; 111
 49a:	32 e1       	ldi	r19, 0x12	; 18
 49c:	43 e8       	ldi	r20, 0x83	; 131
 49e:	5e e3       	ldi	r21, 0x3E	; 62
 4a0:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divsf3>
		NO_FLAGS = 1;
 4a4:	0f 2e       	mov	r0, r31
 4a6:	81 2c       	mov	r8, r1
 4a8:	91 2c       	mov	r9, r1
 4aa:	f0 e8       	ldi	r31, 0x80	; 128
 4ac:	af 2e       	mov	r10, r31
 4ae:	ff e3       	ldi	r31, 0x3F	; 63
 4b0:	bf 2e       	mov	r11, r31
 4b2:	f0 2d       	mov	r31, r0
 4b4:	0b c0       	rjmp	.+22     	; 0x4cc <Timer_ON+0xca>
	
	//GET To & NO. OF COUNTS
	if (MAX == TIME)
	{
		To = 0;
		NO_FLAGS = 1;
 4b6:	0f 2e       	mov	r0, r31
 4b8:	81 2c       	mov	r8, r1
 4ba:	91 2c       	mov	r9, r1
 4bc:	f0 e8       	ldi	r31, 0x80	; 128
 4be:	af 2e       	mov	r10, r31
 4c0:	ff e3       	ldi	r31, 0x3F	; 63
 4c2:	bf 2e       	mov	r11, r31
 4c4:	f0 2d       	mov	r31, r0
	MAX = TT*(2*2*2*2*2*2*2*2);	
	
	//GET To & NO. OF COUNTS
	if (MAX == TIME)
	{
		To = 0;
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	cb 01       	movw	r24, r22
		To = (MAX - TIME)/TT;
		NO_FLAGS = 1;
	} 
	
	//SETTING To
	CONTROL = To;
 4cc:	0e 94 ed 03 	call	0x7da	; 0x7da <__fixunssfsi>
 4d0:	62 bf       	out	0x32, r22	; 50
	SET(COUNTER,2);
 4d2:	83 b7       	in	r24, 0x33	; 51
 4d4:	84 60       	ori	r24, 0x04	; 4
 4d6:	83 bf       	out	0x33, r24	; 51
}
//TIMER DELAY
void Timer_ON(uint32_t TIME)
{
	//DEFINIG VARIABLES
	double COUNTS_NO = 0, TT=0, MAX=0, To=0, NO_FLAGS=0;
 4d8:	c1 2c       	mov	r12, r1
 4da:	d1 2c       	mov	r13, r1
 4dc:	76 01       	movw	r14, r12
	//SETTING To
	CONTROL = To;
	SET(COUNTER,2);
	
	//NO. OF COUNTS
	while(NO_FLAGS > COUNTS_NO)
 4de:	13 c0       	rjmp	.+38     	; 0x506 <Timer_ON+0x104>
	{
		//STARTING TIMER
		SET(FLAG,0);
 4e0:	88 b7       	in	r24, 0x38	; 56
 4e2:	81 60       	ori	r24, 0x01	; 1
 4e4:	88 bf       	out	0x38, r24	; 56

		//WAITING
		while (GET(FLAG,0) == 0);
 4e6:	08 b6       	in	r0, 0x38	; 56
 4e8:	00 fe       	sbrs	r0, 0
 4ea:	fd cf       	rjmp	.-6      	; 0x4e6 <Timer_ON+0xe4>
		
		//CLEAR
		SET(FLAG,0);
 4ec:	88 b7       	in	r24, 0x38	; 56
 4ee:	81 60       	ori	r24, 0x01	; 1
 4f0:	88 bf       	out	0x38, r24	; 56
		COUNTS_NO++;
 4f2:	20 e0       	ldi	r18, 0x00	; 0
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	40 e8       	ldi	r20, 0x80	; 128
 4f8:	5f e3       	ldi	r21, 0x3F	; 63
 4fa:	c7 01       	movw	r24, r14
 4fc:	b6 01       	movw	r22, r12
 4fe:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <__addsf3>
 502:	6b 01       	movw	r12, r22
 504:	7c 01       	movw	r14, r24
	//SETTING To
	CONTROL = To;
	SET(COUNTER,2);
	
	//NO. OF COUNTS
	while(NO_FLAGS > COUNTS_NO)
 506:	a5 01       	movw	r20, r10
 508:	94 01       	movw	r18, r8
 50a:	c7 01       	movw	r24, r14
 50c:	b6 01       	movw	r22, r12
 50e:	0e 94 76 03 	call	0x6ec	; 0x6ec <__cmpsf2>
 512:	88 23       	and	r24, r24
 514:	2c f3       	brlt	.-54     	; 0x4e0 <Timer_ON+0xde>
		//CLEAR
		SET(FLAG,0);
		COUNTS_NO++;
	}
	//STOP
	COUNTER = 0x00;
 516:	13 be       	out	0x33, r1	; 51
}
 518:	ff 90       	pop	r15
 51a:	ef 90       	pop	r14
 51c:	df 90       	pop	r13
 51e:	cf 90       	pop	r12
 520:	bf 90       	pop	r11
 522:	af 90       	pop	r10
 524:	9f 90       	pop	r9
 526:	8f 90       	pop	r8
 528:	08 95       	ret

0000052a <BUTTON_INITIALIZE>:

#include "Button.h"

//INITIALIZATION
void BUTTON_INITIALIZE(uint8_t buttonPort, uint8_t buttonPin)
{
 52a:	98 2f       	mov	r25, r24
 52c:	86 2f       	mov	r24, r22
	DIO_INITIALIZE(buttonPin, buttonPort, IN);
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	69 2f       	mov	r22, r25
 532:	0e 94 40 00 	call	0x80	; 0x80 <DIO_INITIALIZE>
 536:	08 95       	ret

00000538 <BUTTON_READ>:
}

//GET BUTTON STATE
void BUTTON_READ(uint8_t buttonPort, uint8_t buttonPin, uint8_t* value)
{
 538:	98 2f       	mov	r25, r24
 53a:	86 2f       	mov	r24, r22
	DIO_READ(buttonPin, buttonPort, value);
 53c:	69 2f       	mov	r22, r25
 53e:	0e 94 95 01 	call	0x32a	; 0x32a <DIO_READ>
 542:	08 95       	ret

00000544 <LED_INITIALIZE>:

#include "LED.h"

//INITIALIZATION
void LED_INITIALIZE(uint8_t ledPort, uint8_t ledPin)
{
 544:	98 2f       	mov	r25, r24
 546:	86 2f       	mov	r24, r22
	DIO_INITIALIZE(ledPin, ledPort, OUT);
 548:	41 e0       	ldi	r20, 0x01	; 1
 54a:	69 2f       	mov	r22, r25
 54c:	0e 94 40 00 	call	0x80	; 0x80 <DIO_INITIALIZE>
 550:	08 95       	ret

00000552 <LED_ON>:
}

//LED ON
void LED_ON(uint8_t ledPort, uint8_t ledPin)
{
 552:	98 2f       	mov	r25, r24
 554:	86 2f       	mov	r24, r22
	DIO_WRITE(ledPin, ledPort, HIGH);
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	69 2f       	mov	r22, r25
 55a:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_WRITE>
 55e:	08 95       	ret

00000560 <LED_OFF>:
}

//LED OFF
void LED_OFF(uint8_t ledPort, uint8_t ledPin)
{
 560:	98 2f       	mov	r25, r24
 562:	86 2f       	mov	r24, r22
	DIO_WRITE(ledPin, ledPort, LOW);
 564:	40 e0       	ldi	r20, 0x00	; 0
 566:	69 2f       	mov	r22, r25
 568:	0e 94 cb 00 	call	0x196	; 0x196 <DIO_WRITE>
 56c:	08 95       	ret

0000056e <LED_TOGGLE>:
}

//LED TOGGLE
void LED_TOGGLE(uint8_t ledPort, uint8_t ledPin)
{
 56e:	98 2f       	mov	r25, r24
 570:	86 2f       	mov	r24, r22
	DIO_TOGGLE(ledPin, ledPort);
 572:	69 2f       	mov	r22, r25
 574:	0e 94 56 01 	call	0x2ac	; 0x2ac <DIO_TOGGLE>
 578:	08 95       	ret

0000057a <main>:
    }
}*/

int main(void)
{
	LED_INITIALIZE(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 57a:	60 e0       	ldi	r22, 0x00	; 0
 57c:	82 e4       	ldi	r24, 0x42	; 66
 57e:	0e 94 a2 02 	call	0x544	; 0x544 <LED_INITIALIZE>
	BUTTON_INITIALIZE(BUTTON_PORT,BUTTON_PIN);
 582:	62 e0       	ldi	r22, 0x02	; 2
 584:	84 e4       	ldi	r24, 0x44	; 68
 586:	0e 94 95 02 	call	0x52a	; 0x52a <BUTTON_INITIALIZE>
	Timer_INITIALIZE();
 58a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <Timer_INITIALIZE>
	
	uint8_t *p=0;
	while(1)
	{
		BUTTON_READ(BUTTON_PORT,BUTTON_PIN,p);
 58e:	40 e0       	ldi	r20, 0x00	; 0
 590:	50 e0       	ldi	r21, 0x00	; 0
 592:	62 e0       	ldi	r22, 0x02	; 2
 594:	84 e4       	ldi	r24, 0x44	; 68
 596:	0e 94 9c 02 	call	0x538	; 0x538 <BUTTON_READ>
		if (*p==0)
 59a:	80 91 00 00 	lds	r24, 0x0000	; 0x800000 <__TEXT_REGION_LENGTH__+0x7f8000>
 59e:	81 11       	cpse	r24, r1
 5a0:	18 c0       	rjmp	.+48     	; 0x5d2 <main+0x58>
		{
			LED_ON(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 5a2:	60 e0       	ldi	r22, 0x00	; 0
 5a4:	82 e4       	ldi	r24, 0x42	; 66
 5a6:	0e 94 a9 02 	call	0x552	; 0x552 <LED_ON>
			Timer_ON(2000);
 5aa:	80 ed       	ldi	r24, 0xD0	; 208
 5ac:	97 e0       	ldi	r25, 0x07	; 7
 5ae:	0e 94 01 02 	call	0x402	; 0x402 <Timer_ON>
			for(int j=0 ; j<30 ; j++)
 5b2:	c0 e0       	ldi	r28, 0x00	; 0
 5b4:	d0 e0       	ldi	r29, 0x00	; 0
 5b6:	09 c0       	rjmp	.+18     	; 0x5ca <main+0x50>
			{
				Timer_ON(100);
 5b8:	84 e6       	ldi	r24, 0x64	; 100
 5ba:	90 e0       	ldi	r25, 0x00	; 0
 5bc:	0e 94 01 02 	call	0x402	; 0x402 <Timer_ON>
				LED_TOGGLE(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	82 e4       	ldi	r24, 0x42	; 66
 5c4:	0e 94 b7 02 	call	0x56e	; 0x56e <LED_TOGGLE>
		BUTTON_READ(BUTTON_PORT,BUTTON_PIN,p);
		if (*p==0)
		{
			LED_ON(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
			Timer_ON(2000);
			for(int j=0 ; j<30 ; j++)
 5c8:	21 96       	adiw	r28, 0x01	; 1
 5ca:	ce 31       	cpi	r28, 0x1E	; 30
 5cc:	d1 05       	cpc	r29, r1
 5ce:	a4 f3       	brlt	.-24     	; 0x5b8 <main+0x3e>
 5d0:	de cf       	rjmp	.-68     	; 0x58e <main+0x14>
				LED_TOGGLE(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
			}
		} 
		else
		{
			LED_OFF(LED_PEDESTRIANS,LED_GREEN_PEDESTRIANS);
 5d2:	60 e0       	ldi	r22, 0x00	; 0
 5d4:	82 e4       	ldi	r24, 0x42	; 66
 5d6:	0e 94 b0 02 	call	0x560	; 0x560 <LED_OFF>
			Timer_ON(5000);
 5da:	88 e8       	ldi	r24, 0x88	; 136
 5dc:	93 e1       	ldi	r25, 0x13	; 19
 5de:	0e 94 01 02 	call	0x402	; 0x402 <Timer_ON>
 5e2:	d5 cf       	rjmp	.-86     	; 0x58e <main+0x14>

000005e4 <__subsf3>:
 5e4:	50 58       	subi	r21, 0x80	; 128

000005e6 <__addsf3>:
 5e6:	bb 27       	eor	r27, r27
 5e8:	aa 27       	eor	r26, r26
 5ea:	0e 94 0a 03 	call	0x614	; 0x614 <__addsf3x>
 5ee:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_round>
 5f2:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_pscA>
 5f6:	38 f0       	brcs	.+14     	; 0x606 <__addsf3+0x20>
 5f8:	0e 94 b6 04 	call	0x96c	; 0x96c <__fp_pscB>
 5fc:	20 f0       	brcs	.+8      	; 0x606 <__addsf3+0x20>
 5fe:	39 f4       	brne	.+14     	; 0x60e <__addsf3+0x28>
 600:	9f 3f       	cpi	r25, 0xFF	; 255
 602:	19 f4       	brne	.+6      	; 0x60a <__addsf3+0x24>
 604:	26 f4       	brtc	.+8      	; 0x60e <__addsf3+0x28>
 606:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_nan>
 60a:	0e f4       	brtc	.+2      	; 0x60e <__addsf3+0x28>
 60c:	e0 95       	com	r30
 60e:	e7 fb       	bst	r30, 7
 610:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_inf>

00000614 <__addsf3x>:
 614:	e9 2f       	mov	r30, r25
 616:	0e 94 ce 04 	call	0x99c	; 0x99c <__fp_split3>
 61a:	58 f3       	brcs	.-42     	; 0x5f2 <__addsf3+0xc>
 61c:	ba 17       	cp	r27, r26
 61e:	62 07       	cpc	r22, r18
 620:	73 07       	cpc	r23, r19
 622:	84 07       	cpc	r24, r20
 624:	95 07       	cpc	r25, r21
 626:	20 f0       	brcs	.+8      	; 0x630 <__addsf3x+0x1c>
 628:	79 f4       	brne	.+30     	; 0x648 <__addsf3x+0x34>
 62a:	a6 f5       	brtc	.+104    	; 0x694 <__addsf3x+0x80>
 62c:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_zero>
 630:	0e f4       	brtc	.+2      	; 0x634 <__addsf3x+0x20>
 632:	e0 95       	com	r30
 634:	0b 2e       	mov	r0, r27
 636:	ba 2f       	mov	r27, r26
 638:	a0 2d       	mov	r26, r0
 63a:	0b 01       	movw	r0, r22
 63c:	b9 01       	movw	r22, r18
 63e:	90 01       	movw	r18, r0
 640:	0c 01       	movw	r0, r24
 642:	ca 01       	movw	r24, r20
 644:	a0 01       	movw	r20, r0
 646:	11 24       	eor	r1, r1
 648:	ff 27       	eor	r31, r31
 64a:	59 1b       	sub	r21, r25
 64c:	99 f0       	breq	.+38     	; 0x674 <__addsf3x+0x60>
 64e:	59 3f       	cpi	r21, 0xF9	; 249
 650:	50 f4       	brcc	.+20     	; 0x666 <__addsf3x+0x52>
 652:	50 3e       	cpi	r21, 0xE0	; 224
 654:	68 f1       	brcs	.+90     	; 0x6b0 <__addsf3x+0x9c>
 656:	1a 16       	cp	r1, r26
 658:	f0 40       	sbci	r31, 0x00	; 0
 65a:	a2 2f       	mov	r26, r18
 65c:	23 2f       	mov	r18, r19
 65e:	34 2f       	mov	r19, r20
 660:	44 27       	eor	r20, r20
 662:	58 5f       	subi	r21, 0xF8	; 248
 664:	f3 cf       	rjmp	.-26     	; 0x64c <__addsf3x+0x38>
 666:	46 95       	lsr	r20
 668:	37 95       	ror	r19
 66a:	27 95       	ror	r18
 66c:	a7 95       	ror	r26
 66e:	f0 40       	sbci	r31, 0x00	; 0
 670:	53 95       	inc	r21
 672:	c9 f7       	brne	.-14     	; 0x666 <__addsf3x+0x52>
 674:	7e f4       	brtc	.+30     	; 0x694 <__addsf3x+0x80>
 676:	1f 16       	cp	r1, r31
 678:	ba 0b       	sbc	r27, r26
 67a:	62 0b       	sbc	r22, r18
 67c:	73 0b       	sbc	r23, r19
 67e:	84 0b       	sbc	r24, r20
 680:	ba f0       	brmi	.+46     	; 0x6b0 <__addsf3x+0x9c>
 682:	91 50       	subi	r25, 0x01	; 1
 684:	a1 f0       	breq	.+40     	; 0x6ae <__addsf3x+0x9a>
 686:	ff 0f       	add	r31, r31
 688:	bb 1f       	adc	r27, r27
 68a:	66 1f       	adc	r22, r22
 68c:	77 1f       	adc	r23, r23
 68e:	88 1f       	adc	r24, r24
 690:	c2 f7       	brpl	.-16     	; 0x682 <__addsf3x+0x6e>
 692:	0e c0       	rjmp	.+28     	; 0x6b0 <__addsf3x+0x9c>
 694:	ba 0f       	add	r27, r26
 696:	62 1f       	adc	r22, r18
 698:	73 1f       	adc	r23, r19
 69a:	84 1f       	adc	r24, r20
 69c:	48 f4       	brcc	.+18     	; 0x6b0 <__addsf3x+0x9c>
 69e:	87 95       	ror	r24
 6a0:	77 95       	ror	r23
 6a2:	67 95       	ror	r22
 6a4:	b7 95       	ror	r27
 6a6:	f7 95       	ror	r31
 6a8:	9e 3f       	cpi	r25, 0xFE	; 254
 6aa:	08 f0       	brcs	.+2      	; 0x6ae <__addsf3x+0x9a>
 6ac:	b0 cf       	rjmp	.-160    	; 0x60e <__addsf3+0x28>
 6ae:	93 95       	inc	r25
 6b0:	88 0f       	add	r24, r24
 6b2:	08 f0       	brcs	.+2      	; 0x6b6 <__addsf3x+0xa2>
 6b4:	99 27       	eor	r25, r25
 6b6:	ee 0f       	add	r30, r30
 6b8:	97 95       	ror	r25
 6ba:	87 95       	ror	r24
 6bc:	08 95       	ret

000006be <ceil>:
 6be:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__fp_trunc>
 6c2:	90 f0       	brcs	.+36     	; 0x6e8 <ceil+0x2a>
 6c4:	9f 37       	cpi	r25, 0x7F	; 127
 6c6:	48 f4       	brcc	.+18     	; 0x6da <ceil+0x1c>
 6c8:	91 11       	cpse	r25, r1
 6ca:	16 f4       	brtc	.+4      	; 0x6d0 <ceil+0x12>
 6cc:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_szero>
 6d0:	60 e0       	ldi	r22, 0x00	; 0
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	80 e8       	ldi	r24, 0x80	; 128
 6d6:	9f e3       	ldi	r25, 0x3F	; 63
 6d8:	08 95       	ret
 6da:	26 f0       	brts	.+8      	; 0x6e4 <ceil+0x26>
 6dc:	1b 16       	cp	r1, r27
 6de:	61 1d       	adc	r22, r1
 6e0:	71 1d       	adc	r23, r1
 6e2:	81 1d       	adc	r24, r1
 6e4:	0c 94 83 04 	jmp	0x906	; 0x906 <__fp_mintl>
 6e8:	0c 94 9e 04 	jmp	0x93c	; 0x93c <__fp_mpack>

000006ec <__cmpsf2>:
 6ec:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_cmp>
 6f0:	08 f4       	brcc	.+2      	; 0x6f4 <__cmpsf2+0x8>
 6f2:	81 e0       	ldi	r24, 0x01	; 1
 6f4:	08 95       	ret

000006f6 <__divsf3>:
 6f6:	0e 94 8f 03 	call	0x71e	; 0x71e <__divsf3x>
 6fa:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__fp_round>
 6fe:	0e 94 b6 04 	call	0x96c	; 0x96c <__fp_pscB>
 702:	58 f0       	brcs	.+22     	; 0x71a <__divsf3+0x24>
 704:	0e 94 af 04 	call	0x95e	; 0x95e <__fp_pscA>
 708:	40 f0       	brcs	.+16     	; 0x71a <__divsf3+0x24>
 70a:	29 f4       	brne	.+10     	; 0x716 <__divsf3+0x20>
 70c:	5f 3f       	cpi	r21, 0xFF	; 255
 70e:	29 f0       	breq	.+10     	; 0x71a <__divsf3+0x24>
 710:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_inf>
 714:	51 11       	cpse	r21, r1
 716:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_szero>
 71a:	0c 94 ac 04 	jmp	0x958	; 0x958 <__fp_nan>

0000071e <__divsf3x>:
 71e:	0e 94 ce 04 	call	0x99c	; 0x99c <__fp_split3>
 722:	68 f3       	brcs	.-38     	; 0x6fe <__divsf3+0x8>

00000724 <__divsf3_pse>:
 724:	99 23       	and	r25, r25
 726:	b1 f3       	breq	.-20     	; 0x714 <__divsf3+0x1e>
 728:	55 23       	and	r21, r21
 72a:	91 f3       	breq	.-28     	; 0x710 <__divsf3+0x1a>
 72c:	95 1b       	sub	r25, r21
 72e:	55 0b       	sbc	r21, r21
 730:	bb 27       	eor	r27, r27
 732:	aa 27       	eor	r26, r26
 734:	62 17       	cp	r22, r18
 736:	73 07       	cpc	r23, r19
 738:	84 07       	cpc	r24, r20
 73a:	38 f0       	brcs	.+14     	; 0x74a <__divsf3_pse+0x26>
 73c:	9f 5f       	subi	r25, 0xFF	; 255
 73e:	5f 4f       	sbci	r21, 0xFF	; 255
 740:	22 0f       	add	r18, r18
 742:	33 1f       	adc	r19, r19
 744:	44 1f       	adc	r20, r20
 746:	aa 1f       	adc	r26, r26
 748:	a9 f3       	breq	.-22     	; 0x734 <__divsf3_pse+0x10>
 74a:	35 d0       	rcall	.+106    	; 0x7b6 <__divsf3_pse+0x92>
 74c:	0e 2e       	mov	r0, r30
 74e:	3a f0       	brmi	.+14     	; 0x75e <__divsf3_pse+0x3a>
 750:	e0 e8       	ldi	r30, 0x80	; 128
 752:	32 d0       	rcall	.+100    	; 0x7b8 <__divsf3_pse+0x94>
 754:	91 50       	subi	r25, 0x01	; 1
 756:	50 40       	sbci	r21, 0x00	; 0
 758:	e6 95       	lsr	r30
 75a:	00 1c       	adc	r0, r0
 75c:	ca f7       	brpl	.-14     	; 0x750 <__divsf3_pse+0x2c>
 75e:	2b d0       	rcall	.+86     	; 0x7b6 <__divsf3_pse+0x92>
 760:	fe 2f       	mov	r31, r30
 762:	29 d0       	rcall	.+82     	; 0x7b6 <__divsf3_pse+0x92>
 764:	66 0f       	add	r22, r22
 766:	77 1f       	adc	r23, r23
 768:	88 1f       	adc	r24, r24
 76a:	bb 1f       	adc	r27, r27
 76c:	26 17       	cp	r18, r22
 76e:	37 07       	cpc	r19, r23
 770:	48 07       	cpc	r20, r24
 772:	ab 07       	cpc	r26, r27
 774:	b0 e8       	ldi	r27, 0x80	; 128
 776:	09 f0       	breq	.+2      	; 0x77a <__divsf3_pse+0x56>
 778:	bb 0b       	sbc	r27, r27
 77a:	80 2d       	mov	r24, r0
 77c:	bf 01       	movw	r22, r30
 77e:	ff 27       	eor	r31, r31
 780:	93 58       	subi	r25, 0x83	; 131
 782:	5f 4f       	sbci	r21, 0xFF	; 255
 784:	3a f0       	brmi	.+14     	; 0x794 <__divsf3_pse+0x70>
 786:	9e 3f       	cpi	r25, 0xFE	; 254
 788:	51 05       	cpc	r21, r1
 78a:	78 f0       	brcs	.+30     	; 0x7aa <__divsf3_pse+0x86>
 78c:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__fp_inf>
 790:	0c 94 09 05 	jmp	0xa12	; 0xa12 <__fp_szero>
 794:	5f 3f       	cpi	r21, 0xFF	; 255
 796:	e4 f3       	brlt	.-8      	; 0x790 <__divsf3_pse+0x6c>
 798:	98 3e       	cpi	r25, 0xE8	; 232
 79a:	d4 f3       	brlt	.-12     	; 0x790 <__divsf3_pse+0x6c>
 79c:	86 95       	lsr	r24
 79e:	77 95       	ror	r23
 7a0:	67 95       	ror	r22
 7a2:	b7 95       	ror	r27
 7a4:	f7 95       	ror	r31
 7a6:	9f 5f       	subi	r25, 0xFF	; 255
 7a8:	c9 f7       	brne	.-14     	; 0x79c <__divsf3_pse+0x78>
 7aa:	88 0f       	add	r24, r24
 7ac:	91 1d       	adc	r25, r1
 7ae:	96 95       	lsr	r25
 7b0:	87 95       	ror	r24
 7b2:	97 f9       	bld	r25, 7
 7b4:	08 95       	ret
 7b6:	e1 e0       	ldi	r30, 0x01	; 1
 7b8:	66 0f       	add	r22, r22
 7ba:	77 1f       	adc	r23, r23
 7bc:	88 1f       	adc	r24, r24
 7be:	bb 1f       	adc	r27, r27
 7c0:	62 17       	cp	r22, r18
 7c2:	73 07       	cpc	r23, r19
 7c4:	84 07       	cpc	r24, r20
 7c6:	ba 07       	cpc	r27, r26
 7c8:	20 f0       	brcs	.+8      	; 0x7d2 <__divsf3_pse+0xae>
 7ca:	62 1b       	sub	r22, r18
 7cc:	73 0b       	sbc	r23, r19
 7ce:	84 0b       	sbc	r24, r20
 7d0:	ba 0b       	sbc	r27, r26
 7d2:	ee 1f       	adc	r30, r30
 7d4:	88 f7       	brcc	.-30     	; 0x7b8 <__divsf3_pse+0x94>
 7d6:	e0 95       	com	r30
 7d8:	08 95       	ret

000007da <__fixunssfsi>:
 7da:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_splitA>
 7de:	88 f0       	brcs	.+34     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7e0:	9f 57       	subi	r25, 0x7F	; 127
 7e2:	98 f0       	brcs	.+38     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7e4:	b9 2f       	mov	r27, r25
 7e6:	99 27       	eor	r25, r25
 7e8:	b7 51       	subi	r27, 0x17	; 23
 7ea:	b0 f0       	brcs	.+44     	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 7ec:	e1 f0       	breq	.+56     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7ee:	66 0f       	add	r22, r22
 7f0:	77 1f       	adc	r23, r23
 7f2:	88 1f       	adc	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	1a f0       	brmi	.+6      	; 0x7fe <__fixunssfsi+0x24>
 7f8:	ba 95       	dec	r27
 7fa:	c9 f7       	brne	.-14     	; 0x7ee <__fixunssfsi+0x14>
 7fc:	14 c0       	rjmp	.+40     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 7fe:	b1 30       	cpi	r27, 0x01	; 1
 800:	91 f0       	breq	.+36     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 802:	0e 94 08 05 	call	0xa10	; 0xa10 <__fp_zero>
 806:	b1 e0       	ldi	r27, 0x01	; 1
 808:	08 95       	ret
 80a:	0c 94 08 05 	jmp	0xa10	; 0xa10 <__fp_zero>
 80e:	67 2f       	mov	r22, r23
 810:	78 2f       	mov	r23, r24
 812:	88 27       	eor	r24, r24
 814:	b8 5f       	subi	r27, 0xF8	; 248
 816:	39 f0       	breq	.+14     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 818:	b9 3f       	cpi	r27, 0xF9	; 249
 81a:	cc f3       	brlt	.-14     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 81c:	86 95       	lsr	r24
 81e:	77 95       	ror	r23
 820:	67 95       	ror	r22
 822:	b3 95       	inc	r27
 824:	d9 f7       	brne	.-10     	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 826:	3e f4       	brtc	.+14     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
 828:	90 95       	com	r25
 82a:	80 95       	com	r24
 82c:	70 95       	com	r23
 82e:	61 95       	neg	r22
 830:	7f 4f       	sbci	r23, 0xFF	; 255
 832:	8f 4f       	sbci	r24, 0xFF	; 255
 834:	9f 4f       	sbci	r25, 0xFF	; 255
 836:	08 95       	ret

00000838 <__floatunsisf>:
 838:	e8 94       	clt
 83a:	09 c0       	rjmp	.+18     	; 0x84e <__floatsisf+0x12>

0000083c <__floatsisf>:
 83c:	97 fb       	bst	r25, 7
 83e:	3e f4       	brtc	.+14     	; 0x84e <__floatsisf+0x12>
 840:	90 95       	com	r25
 842:	80 95       	com	r24
 844:	70 95       	com	r23
 846:	61 95       	neg	r22
 848:	7f 4f       	sbci	r23, 0xFF	; 255
 84a:	8f 4f       	sbci	r24, 0xFF	; 255
 84c:	9f 4f       	sbci	r25, 0xFF	; 255
 84e:	99 23       	and	r25, r25
 850:	a9 f0       	breq	.+42     	; 0x87c <__stack+0x1d>
 852:	f9 2f       	mov	r31, r25
 854:	96 e9       	ldi	r25, 0x96	; 150
 856:	bb 27       	eor	r27, r27
 858:	93 95       	inc	r25
 85a:	f6 95       	lsr	r31
 85c:	87 95       	ror	r24
 85e:	77 95       	ror	r23
 860:	67 95       	ror	r22
 862:	b7 95       	ror	r27
 864:	f1 11       	cpse	r31, r1
 866:	f8 cf       	rjmp	.-16     	; 0x858 <__floatsisf+0x1c>
 868:	fa f4       	brpl	.+62     	; 0x8a8 <__stack+0x49>
 86a:	bb 0f       	add	r27, r27
 86c:	11 f4       	brne	.+4      	; 0x872 <__stack+0x13>
 86e:	60 ff       	sbrs	r22, 0
 870:	1b c0       	rjmp	.+54     	; 0x8a8 <__stack+0x49>
 872:	6f 5f       	subi	r22, 0xFF	; 255
 874:	7f 4f       	sbci	r23, 0xFF	; 255
 876:	8f 4f       	sbci	r24, 0xFF	; 255
 878:	9f 4f       	sbci	r25, 0xFF	; 255
 87a:	16 c0       	rjmp	.+44     	; 0x8a8 <__stack+0x49>
 87c:	88 23       	and	r24, r24
 87e:	11 f0       	breq	.+4      	; 0x884 <__stack+0x25>
 880:	96 e9       	ldi	r25, 0x96	; 150
 882:	11 c0       	rjmp	.+34     	; 0x8a6 <__stack+0x47>
 884:	77 23       	and	r23, r23
 886:	21 f0       	breq	.+8      	; 0x890 <__stack+0x31>
 888:	9e e8       	ldi	r25, 0x8E	; 142
 88a:	87 2f       	mov	r24, r23
 88c:	76 2f       	mov	r23, r22
 88e:	05 c0       	rjmp	.+10     	; 0x89a <__stack+0x3b>
 890:	66 23       	and	r22, r22
 892:	71 f0       	breq	.+28     	; 0x8b0 <__stack+0x51>
 894:	96 e8       	ldi	r25, 0x86	; 134
 896:	86 2f       	mov	r24, r22
 898:	70 e0       	ldi	r23, 0x00	; 0
 89a:	60 e0       	ldi	r22, 0x00	; 0
 89c:	2a f0       	brmi	.+10     	; 0x8a8 <__stack+0x49>
 89e:	9a 95       	dec	r25
 8a0:	66 0f       	add	r22, r22
 8a2:	77 1f       	adc	r23, r23
 8a4:	88 1f       	adc	r24, r24
 8a6:	da f7       	brpl	.-10     	; 0x89e <__stack+0x3f>
 8a8:	88 0f       	add	r24, r24
 8aa:	96 95       	lsr	r25
 8ac:	87 95       	ror	r24
 8ae:	97 f9       	bld	r25, 7
 8b0:	08 95       	ret

000008b2 <__fp_cmp>:
 8b2:	99 0f       	add	r25, r25
 8b4:	00 08       	sbc	r0, r0
 8b6:	55 0f       	add	r21, r21
 8b8:	aa 0b       	sbc	r26, r26
 8ba:	e0 e8       	ldi	r30, 0x80	; 128
 8bc:	fe ef       	ldi	r31, 0xFE	; 254
 8be:	16 16       	cp	r1, r22
 8c0:	17 06       	cpc	r1, r23
 8c2:	e8 07       	cpc	r30, r24
 8c4:	f9 07       	cpc	r31, r25
 8c6:	c0 f0       	brcs	.+48     	; 0x8f8 <__fp_cmp+0x46>
 8c8:	12 16       	cp	r1, r18
 8ca:	13 06       	cpc	r1, r19
 8cc:	e4 07       	cpc	r30, r20
 8ce:	f5 07       	cpc	r31, r21
 8d0:	98 f0       	brcs	.+38     	; 0x8f8 <__fp_cmp+0x46>
 8d2:	62 1b       	sub	r22, r18
 8d4:	73 0b       	sbc	r23, r19
 8d6:	84 0b       	sbc	r24, r20
 8d8:	95 0b       	sbc	r25, r21
 8da:	39 f4       	brne	.+14     	; 0x8ea <__fp_cmp+0x38>
 8dc:	0a 26       	eor	r0, r26
 8de:	61 f0       	breq	.+24     	; 0x8f8 <__fp_cmp+0x46>
 8e0:	23 2b       	or	r18, r19
 8e2:	24 2b       	or	r18, r20
 8e4:	25 2b       	or	r18, r21
 8e6:	21 f4       	brne	.+8      	; 0x8f0 <__fp_cmp+0x3e>
 8e8:	08 95       	ret
 8ea:	0a 26       	eor	r0, r26
 8ec:	09 f4       	brne	.+2      	; 0x8f0 <__fp_cmp+0x3e>
 8ee:	a1 40       	sbci	r26, 0x01	; 1
 8f0:	a6 95       	lsr	r26
 8f2:	8f ef       	ldi	r24, 0xFF	; 255
 8f4:	81 1d       	adc	r24, r1
 8f6:	81 1d       	adc	r24, r1
 8f8:	08 95       	ret

000008fa <__fp_inf>:
 8fa:	97 f9       	bld	r25, 7
 8fc:	9f 67       	ori	r25, 0x7F	; 127
 8fe:	80 e8       	ldi	r24, 0x80	; 128
 900:	70 e0       	ldi	r23, 0x00	; 0
 902:	60 e0       	ldi	r22, 0x00	; 0
 904:	08 95       	ret

00000906 <__fp_mintl>:
 906:	88 23       	and	r24, r24
 908:	71 f4       	brne	.+28     	; 0x926 <__fp_mintl+0x20>
 90a:	77 23       	and	r23, r23
 90c:	21 f0       	breq	.+8      	; 0x916 <__fp_mintl+0x10>
 90e:	98 50       	subi	r25, 0x08	; 8
 910:	87 2b       	or	r24, r23
 912:	76 2f       	mov	r23, r22
 914:	07 c0       	rjmp	.+14     	; 0x924 <__fp_mintl+0x1e>
 916:	66 23       	and	r22, r22
 918:	11 f4       	brne	.+4      	; 0x91e <__fp_mintl+0x18>
 91a:	99 27       	eor	r25, r25
 91c:	0d c0       	rjmp	.+26     	; 0x938 <__fp_mintl+0x32>
 91e:	90 51       	subi	r25, 0x10	; 16
 920:	86 2b       	or	r24, r22
 922:	70 e0       	ldi	r23, 0x00	; 0
 924:	60 e0       	ldi	r22, 0x00	; 0
 926:	2a f0       	brmi	.+10     	; 0x932 <__fp_mintl+0x2c>
 928:	9a 95       	dec	r25
 92a:	66 0f       	add	r22, r22
 92c:	77 1f       	adc	r23, r23
 92e:	88 1f       	adc	r24, r24
 930:	da f7       	brpl	.-10     	; 0x928 <__fp_mintl+0x22>
 932:	88 0f       	add	r24, r24
 934:	96 95       	lsr	r25
 936:	87 95       	ror	r24
 938:	97 f9       	bld	r25, 7
 93a:	08 95       	ret

0000093c <__fp_mpack>:
 93c:	9f 3f       	cpi	r25, 0xFF	; 255
 93e:	31 f0       	breq	.+12     	; 0x94c <__fp_mpack_finite+0xc>

00000940 <__fp_mpack_finite>:
 940:	91 50       	subi	r25, 0x01	; 1
 942:	20 f4       	brcc	.+8      	; 0x94c <__fp_mpack_finite+0xc>
 944:	87 95       	ror	r24
 946:	77 95       	ror	r23
 948:	67 95       	ror	r22
 94a:	b7 95       	ror	r27
 94c:	88 0f       	add	r24, r24
 94e:	91 1d       	adc	r25, r1
 950:	96 95       	lsr	r25
 952:	87 95       	ror	r24
 954:	97 f9       	bld	r25, 7
 956:	08 95       	ret

00000958 <__fp_nan>:
 958:	9f ef       	ldi	r25, 0xFF	; 255
 95a:	80 ec       	ldi	r24, 0xC0	; 192
 95c:	08 95       	ret

0000095e <__fp_pscA>:
 95e:	00 24       	eor	r0, r0
 960:	0a 94       	dec	r0
 962:	16 16       	cp	r1, r22
 964:	17 06       	cpc	r1, r23
 966:	18 06       	cpc	r1, r24
 968:	09 06       	cpc	r0, r25
 96a:	08 95       	ret

0000096c <__fp_pscB>:
 96c:	00 24       	eor	r0, r0
 96e:	0a 94       	dec	r0
 970:	12 16       	cp	r1, r18
 972:	13 06       	cpc	r1, r19
 974:	14 06       	cpc	r1, r20
 976:	05 06       	cpc	r0, r21
 978:	08 95       	ret

0000097a <__fp_round>:
 97a:	09 2e       	mov	r0, r25
 97c:	03 94       	inc	r0
 97e:	00 0c       	add	r0, r0
 980:	11 f4       	brne	.+4      	; 0x986 <__fp_round+0xc>
 982:	88 23       	and	r24, r24
 984:	52 f0       	brmi	.+20     	; 0x99a <__fp_round+0x20>
 986:	bb 0f       	add	r27, r27
 988:	40 f4       	brcc	.+16     	; 0x99a <__fp_round+0x20>
 98a:	bf 2b       	or	r27, r31
 98c:	11 f4       	brne	.+4      	; 0x992 <__fp_round+0x18>
 98e:	60 ff       	sbrs	r22, 0
 990:	04 c0       	rjmp	.+8      	; 0x99a <__fp_round+0x20>
 992:	6f 5f       	subi	r22, 0xFF	; 255
 994:	7f 4f       	sbci	r23, 0xFF	; 255
 996:	8f 4f       	sbci	r24, 0xFF	; 255
 998:	9f 4f       	sbci	r25, 0xFF	; 255
 99a:	08 95       	ret

0000099c <__fp_split3>:
 99c:	57 fd       	sbrc	r21, 7
 99e:	90 58       	subi	r25, 0x80	; 128
 9a0:	44 0f       	add	r20, r20
 9a2:	55 1f       	adc	r21, r21
 9a4:	59 f0       	breq	.+22     	; 0x9bc <__fp_splitA+0x10>
 9a6:	5f 3f       	cpi	r21, 0xFF	; 255
 9a8:	71 f0       	breq	.+28     	; 0x9c6 <__fp_splitA+0x1a>
 9aa:	47 95       	ror	r20

000009ac <__fp_splitA>:
 9ac:	88 0f       	add	r24, r24
 9ae:	97 fb       	bst	r25, 7
 9b0:	99 1f       	adc	r25, r25
 9b2:	61 f0       	breq	.+24     	; 0x9cc <__fp_splitA+0x20>
 9b4:	9f 3f       	cpi	r25, 0xFF	; 255
 9b6:	79 f0       	breq	.+30     	; 0x9d6 <__fp_splitA+0x2a>
 9b8:	87 95       	ror	r24
 9ba:	08 95       	ret
 9bc:	12 16       	cp	r1, r18
 9be:	13 06       	cpc	r1, r19
 9c0:	14 06       	cpc	r1, r20
 9c2:	55 1f       	adc	r21, r21
 9c4:	f2 cf       	rjmp	.-28     	; 0x9aa <__fp_split3+0xe>
 9c6:	46 95       	lsr	r20
 9c8:	f1 df       	rcall	.-30     	; 0x9ac <__fp_splitA>
 9ca:	08 c0       	rjmp	.+16     	; 0x9dc <__fp_splitA+0x30>
 9cc:	16 16       	cp	r1, r22
 9ce:	17 06       	cpc	r1, r23
 9d0:	18 06       	cpc	r1, r24
 9d2:	99 1f       	adc	r25, r25
 9d4:	f1 cf       	rjmp	.-30     	; 0x9b8 <__fp_splitA+0xc>
 9d6:	86 95       	lsr	r24
 9d8:	71 05       	cpc	r23, r1
 9da:	61 05       	cpc	r22, r1
 9dc:	08 94       	sec
 9de:	08 95       	ret

000009e0 <__fp_trunc>:
 9e0:	0e 94 d6 04 	call	0x9ac	; 0x9ac <__fp_splitA>
 9e4:	a0 f0       	brcs	.+40     	; 0xa0e <__fp_trunc+0x2e>
 9e6:	be e7       	ldi	r27, 0x7E	; 126
 9e8:	b9 17       	cp	r27, r25
 9ea:	88 f4       	brcc	.+34     	; 0xa0e <__fp_trunc+0x2e>
 9ec:	bb 27       	eor	r27, r27
 9ee:	9f 38       	cpi	r25, 0x8F	; 143
 9f0:	60 f4       	brcc	.+24     	; 0xa0a <__fp_trunc+0x2a>
 9f2:	16 16       	cp	r1, r22
 9f4:	b1 1d       	adc	r27, r1
 9f6:	67 2f       	mov	r22, r23
 9f8:	78 2f       	mov	r23, r24
 9fa:	88 27       	eor	r24, r24
 9fc:	98 5f       	subi	r25, 0xF8	; 248
 9fe:	f7 cf       	rjmp	.-18     	; 0x9ee <__fp_trunc+0xe>
 a00:	86 95       	lsr	r24
 a02:	77 95       	ror	r23
 a04:	67 95       	ror	r22
 a06:	b1 1d       	adc	r27, r1
 a08:	93 95       	inc	r25
 a0a:	96 39       	cpi	r25, 0x96	; 150
 a0c:	c8 f3       	brcs	.-14     	; 0xa00 <__fp_trunc+0x20>
 a0e:	08 95       	ret

00000a10 <__fp_zero>:
 a10:	e8 94       	clt

00000a12 <__fp_szero>:
 a12:	bb 27       	eor	r27, r27
 a14:	66 27       	eor	r22, r22
 a16:	77 27       	eor	r23, r23
 a18:	cb 01       	movw	r24, r22
 a1a:	97 f9       	bld	r25, 7
 a1c:	08 95       	ret

00000a1e <__gesf2>:
 a1e:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__fp_cmp>
 a22:	08 f4       	brcc	.+2      	; 0xa26 <__gesf2+0x8>
 a24:	8f ef       	ldi	r24, 0xFF	; 255
 a26:	08 95       	ret

00000a28 <_exit>:
 a28:	f8 94       	cli

00000a2a <__stop_program>:
 a2a:	ff cf       	rjmp	.-2      	; 0xa2a <__stop_program>
